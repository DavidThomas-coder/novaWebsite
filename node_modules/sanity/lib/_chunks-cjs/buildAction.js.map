{"version":3,"file":"buildAction.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/server/buildVendorDependencies.ts","../../src/_internal/cli/util/compareStudioDependencyVersions.ts","../../src/_internal/cli/util/getAutoUpdatesImportMap.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\nimport semver from 'semver'\nimport {build} from 'vite'\n\nimport {createExternalFromImportMap} from './createExternalFromImportMap'\n\n// Directory where vendor packages will be stored\nconst VENDOR_DIR = 'vendor'\n\n/**\n * A type representing the imports of vendor packages, defining specific entry\n * points for various versions and subpaths of the packages.\n *\n * The `VendorImports` object is used to build ESM browser-compatible versions\n * of the specified packages. This approach ensures that the appropriate version\n * and entry points are used for each package, enabling compatibility and proper\n * functionality in the browser environment.\n *\n * ## Rationale\n *\n * The rationale for this structure is to handle different versions of the\n * packages carefully, especially major versions. Major version bumps often\n * introduce breaking changes, so the module scheme for the package needs to be\n * checked when there is a major version update. However, minor and patch\n * versions are generally backward compatible, so they are handled more\n * leniently. By assuming that new minor versions are compatible, we avoid\n * unnecessary warnings and streamline the update process.\n *\n * If a new minor version introduces an additional subpath export within the\n * package of this version range, the corresponding package can add a more\n * specific version range that includes the new subpath. This design allows for\n * flexibility and ease of maintenance, ensuring that the latest features and\n * fixes are incorporated without extensive manual intervention.\n *\n * An additional subpath export within the package of this version range that\n * could cause the build to break if that new export is used, can be treated as\n * a bug fix. It might make more sense to our users that this new subpath isn't\n * supported yet until we address it as a bug fix. This approach helps maintain\n * stability and prevents unexpected issues during the build process.\n *\n * ## Structure\n * The `VendorImports` type is a nested object where:\n * - The keys at the first level represent the package names.\n * - The keys at the second level represent the version ranges (e.g., `^19.0.0`).\n * - The keys at the third level represent the subpaths within the package (e.g., `.` for the main entry point).\n * - The values at the third level are the relative paths to the corresponding entry points within the package.\n *\n * This structure allows for precise specification of the entry points for\n * different versions and subpaths, ensuring that the correct files are used\n * during the build process.\n */\ntype VendorImports = {\n  [packageName: string]: {\n    [versionRange: string]: {\n      [subpath: string]: string\n    }\n  }\n}\n\n// Define the vendor packages and their corresponding versions and entry points\nconst VENDOR_IMPORTS: VendorImports = {\n  'react': {\n    '^19.0.0': {\n      '.': './cjs/react.production.js',\n      './jsx-runtime': './cjs/react-jsx-runtime.production.js',\n      './jsx-dev-runtime': './cjs/react-jsx-dev-runtime.production.js',\n      './compiler-runtime': './cjs/react-compiler-runtime.production.js',\n      './package.json': './package.json',\n    },\n    '^18.0.0': {\n      '.': './cjs/react.production.min.js',\n      './jsx-runtime': './cjs/react-jsx-runtime.production.min.js',\n      './jsx-dev-runtime': './cjs/react-jsx-dev-runtime.production.min.js',\n      './package.json': './package.json',\n    },\n  },\n  'react-dom': {\n    '^19.0.0': {\n      '.': './cjs/react-dom.production.js',\n      './client': './cjs/react-dom-client.production.js',\n      './server': './cjs/react-dom-server-legacy.browser.production.js',\n      './server.browser': './cjs/react-dom-server-legacy.browser.production.js',\n      './static': './cjs/react-dom-server.browser.production.js',\n      './static.browser': './cjs/react-dom-server.browser.production.js',\n      './package.json': './package.json',\n    },\n    '^18.0.0': {\n      '.': './cjs/react-dom.production.min.js',\n      './client': './cjs/react-dom.production.min.js',\n      './server': './cjs/react-dom-server-legacy.browser.production.min.js',\n      './server.browser': './cjs/react-dom-server-legacy.browser.production.min.js',\n      './package.json': './package.json',\n    },\n  },\n  'styled-components': {\n    '^6.1.0': {\n      '.': './dist/styled-components.esm.js',\n      './package.json': './package.json',\n    },\n  },\n}\n\ninterface VendorBuildOptions {\n  cwd: string\n  outputDir: string\n  basePath: string\n}\n\n/**\n * Builds the ESM browser compatible versions of the vendor packages\n * specified in VENDOR_IMPORTS. Returns the `imports` object of an import map.\n */\nexport async function buildVendorDependencies({\n  cwd,\n  outputDir,\n  basePath,\n}: VendorBuildOptions): Promise<Record<string, string>> {\n  // normalize the CWD to a relative dir for better error messages\n  const dir = path.relative(process.cwd(), path.resolve(cwd))\n  const entry: Record<string, string> = {}\n  const imports: Record<string, string> = {}\n\n  // Iterate over each package and its version ranges in VENDOR_IMPORTS\n  for (const [packageName, ranges] of Object.entries(VENDOR_IMPORTS)) {\n    const packageJsonPath = resolveFrom.silent(cwd, path.join(packageName, 'package.json'))\n    if (!packageJsonPath) {\n      throw new Error(\n        `Could not find package.json for package '${packageName}' from directory '${dir}'. Is it installed?`,\n      )\n    }\n\n    let packageJson\n\n    try {\n      // Read and parse the package.json file\n      packageJson = JSON.parse(await fs.promises.readFile(packageJsonPath, 'utf-8'))\n    } catch (e) {\n      const message = `Could not read package.json for package '${packageName}' from directory '${dir}'`\n      if (typeof e?.message === 'string') {\n        // Re-assign the error message so the stack trace is more visible\n        e.message = `${message}: ${e.message}`\n        throw e\n      }\n\n      throw new Error(message, {cause: e})\n    }\n\n    // Coerce the version to a semver-compatible version\n    const version = semver.coerce(packageJson.version)?.version\n    if (!version) {\n      throw new Error(`Could not parse version '${packageJson.version}' from '${packageName}'`)\n    }\n\n    // Sort version ranges in descending order\n    const sortedRanges = Object.keys(ranges).sort((range1, range2) => {\n      const min1 = semver.minVersion(range1)\n      const min2 = semver.minVersion(range2)\n\n      if (!min1) throw new Error(`Could not parse range '${range1}'`)\n      if (!min2) throw new Error(`Could not parse range '${range2}'`)\n\n      // sort them in reverse so we can rely on array `.find` below\n      return semver.rcompare(min1.version, min2.version)\n    })\n\n    // Find the first version range that satisfies the package version\n    const matchedRange = sortedRanges.find((range) => semver.satisfies(version, range))\n\n    if (!matchedRange) {\n      const min = semver.minVersion(sortedRanges[sortedRanges.length - 1])\n      if (!min) {\n        throw new Error(`Could not find a minimum version for package '${packageName}'`)\n      }\n\n      if (semver.gt(min.version, version)) {\n        throw new Error(`Package '${packageName}' requires at least ${min.version}.`)\n      }\n\n      throw new Error(`Version '${version}' of package '${packageName}' is not supported yet.`)\n    }\n\n    const subpaths = ranges[matchedRange]\n\n    // Iterate over each subpath and its corresponding entry point\n    for (const [subpath, relativeEntryPoint] of Object.entries(subpaths)) {\n      const packagePath = path.dirname(packageJsonPath)\n      const entryPoint = resolveFrom.silent(packagePath, relativeEntryPoint)\n\n      if (!entryPoint) {\n        throw new Error(\n          `Failed to resolve entry point '${path.join(packageName, relativeEntryPoint)}'. `,\n        )\n      }\n\n      const specifier = path.posix.join(packageName, subpath)\n      const chunkName = path.posix.join(\n        packageName,\n        path.relative(packageName, specifier) || 'index',\n      )\n\n      entry[chunkName] = entryPoint\n      imports[specifier] = path.posix.join('/', basePath, VENDOR_DIR, `${chunkName}.mjs`)\n    }\n  }\n\n  // removes the `RollupWatcher` type\n  type BuildResult = Exclude<Awaited<ReturnType<typeof build>>, {close: unknown}>\n\n  // Use Vite to build the packages into the output directory\n  let buildResult = (await build({\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite-vendor',\n    root: cwd,\n    configFile: false,\n    logLevel: 'silent',\n\n    appType: 'custom',\n    mode: 'production',\n    define: {'process.env.NODE_ENV': JSON.stringify('production')},\n\n    build: {\n      minify: true,\n      emptyOutDir: false, // Rely on CLI to do this\n      outDir: path.join(outputDir, VENDOR_DIR),\n      lib: {entry, formats: ['es']},\n      rollupOptions: {\n        external: createExternalFromImportMap({imports}),\n        output: {\n          entryFileNames: '[name]-[hash].mjs',\n          chunkFileNames: '[name]-[hash].mjs',\n          exports: 'named',\n          format: 'es',\n        },\n        treeshake: {preset: 'recommended'},\n      },\n    },\n  })) as BuildResult\n\n  buildResult = Array.isArray(buildResult) ? buildResult : [buildResult]\n\n  // Create a map of the original import specifiers to their hashed filenames\n  const hashedImports: Record<string, string> = {}\n  const output = buildResult.flatMap((i) => i.output)\n\n  for (const chunk of output) {\n    if (chunk.type === 'asset') continue\n\n    for (const [specifier, originalPath] of Object.entries(imports)) {\n      if (originalPath.endsWith(`${chunk.name}.mjs`)) {\n        hashedImports[specifier] = path.posix.join('/', basePath, VENDOR_DIR, chunk.fileName)\n      }\n    }\n  }\n\n  return hashedImports\n}\n","import path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\nimport semver from 'semver'\n\nimport {type AutoUpdatesImportMap} from './getAutoUpdatesImportMap'\nimport {readPackageJson} from './readPackageJson'\n\nasync function getRemoteResolvedVersion(fetchFn: typeof fetch, url: string) {\n  try {\n    const res = await fetchFn(url, {method: 'HEAD', redirect: 'manual'})\n    return res.headers.get('x-resolved-version')\n  } catch (err) {\n    throw new Error(`Failed to fetch remote version for ${url}: ${err.message}`)\n  }\n}\n\ninterface CompareStudioDependencyVersions {\n  pkg: string\n  installed: string\n  remote: string\n}\n\n/**\n * Compares the versions of dependencies in the studio with their remote versions.\n *\n * This function reads the package.json file in the provided working directory, and compares the versions of the dependencies\n * specified in the `autoUpdatesImports` parameter with their remote versions. If the versions do not match, the dependency is\n * added to a list of failed dependencies, which is returned by the function.\n *\n * The failed dependencies are anything that does not strictly match the remote version.\n * This means that if a version is lower or greater by even a patch it will be marked as failed.\n *\n * @param autoUpdatesImports - An object mapping package names to their remote import URLs.\n * @param workDir - The path to the working directory containing the package.json file.\n * @param fetchFn - Optional {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API | Fetch}-compatible function to use for requesting the current remote version of a module\n *\n * @returns A promise that resolves to an array of objects, each containing\n * the name of a package whose local and remote versions do not match, along with the local and remote versions.\n *\n * @throws Throws an error if the remote version of a package cannot be fetched, or if the local version of a package\n * cannot be parsed.\n */\nexport async function compareStudioDependencyVersions(\n  autoUpdatesImports: AutoUpdatesImportMap,\n  workDir: string,\n  fetchFn = globalThis.fetch,\n): Promise<Array<CompareStudioDependencyVersions>> {\n  const manifest = readPackageJson(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const failedDependencies: Array<CompareStudioDependencyVersions> = []\n\n  // Filter out the packages that are wildcards in the import map\n  const filteredAutoUpdatesImports = Object.entries(autoUpdatesImports).filter(\n    ([pkg]) => !pkg.endsWith('/'),\n  ) as Array<[string, string]>\n\n  for (const [pkg, value] of filteredAutoUpdatesImports) {\n    const resolvedVersion = await getRemoteResolvedVersion(fetchFn, value)\n\n    if (!resolvedVersion) {\n      throw new Error(`Failed to fetch remote version for ${value}`)\n    }\n\n    const dependency = dependencies[pkg]\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg, 'package.json'))\n\n    const installed = semver.coerce(\n      manifestPath ? readPackageJson(manifestPath).version : dependency,\n    )\n\n    if (!installed) {\n      throw new Error(`Failed to parse installed version for ${pkg}`)\n    }\n\n    if (!semver.eq(resolvedVersion, installed.version)) {\n      failedDependencies.push({pkg, installed: installed.version, remote: resolvedVersion})\n    }\n  }\n\n  return failedDependencies\n}\n","/**\n * @internal\n */\nexport interface AutoUpdatesImportMap {\n  'sanity': string\n  'sanity/': string\n  '@sanity/vision': string\n  '@sanity/vision/': string\n}\n\nconst MODULES_HOST =\n  process.env.SANITY_INTERNAL_ENV === 'staging'\n    ? 'https://sanity-cdn.work'\n    : 'https://sanity-cdn.com'\n\n/**\n * @internal\n */\nexport function getAutoUpdateImportMap(version: string): AutoUpdatesImportMap {\n  const timestamp = `t${Math.floor(Date.now() / 1000)}`\n\n  const autoUpdatesImports = {\n    'sanity': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}`,\n    'sanity/': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}/`,\n    '@sanity/vision': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}`,\n    '@sanity/vision/': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}/`,\n  }\n\n  return autoUpdatesImports\n}\n","import path from 'node:path'\nimport {promisify} from 'node:util'\n\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport semver from 'semver'\nimport {noopLogger} from '@sanity/telemetry'\nimport rimrafCallback from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles, ChunkModule, ChunkStats} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareStudioDependencyVersions} from '../../util/compareStudioDependencyVersions'\nimport {getAutoUpdateImportMap} from '../../util/getAutoUpdatesImportMap'\n\nconst rimraf = promisify(rimrafCallback)\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return {didCompile: false}\n  }\n\n  const autoUpdatesEnabled =\n    flags['auto-updates'] ||\n    (cliConfig && 'autoUpdates' in cliConfig && cliConfig.autoUpdates === true)\n\n  // Get the version without any tags if any\n  const coercedSanityVersion = semver.coerce(installedSanityVersion)?.version\n  if (autoUpdatesEnabled && !coercedSanityVersion) {\n    throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n  }\n  const version = encodeURIComponent(`^${coercedSanityVersion}`)\n  const autoUpdatesImports = getAutoUpdateImportMap(version)\n\n  if (autoUpdatesEnabled) {\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // Check the versions\n    try {\n      const result = await compareStudioDependencyVersions(autoUpdatesImports, workDir)\n\n      // If it is in unattended mode, we don't want to prompt\n      if (result?.length && !unattendedMode) {\n        const shouldContinue = await prompt.single({\n          type: 'confirm',\n          message: chalk.yellow(\n            `The following local package versions are different from the versions currently served at runtime.\\n` +\n              `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n              `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n              `Continue anyway?`,\n          ),\n          default: false,\n        })\n\n        if (!shouldContinue) {\n          return process.exit(0)\n        }\n      }\n    } catch (err) {\n      throw err\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner('Build Sanity Studio').start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n\nfunction sortModulesBySize(chunks: ChunkStats[]): ChunkModule[] {\n  return chunks\n    .flatMap((chunk) => chunk.modules)\n    .sort((modA, modB) => modB.renderedLength - modA.renderedLength)\n}\n\nfunction formatModuleSizes(modules: ChunkModule[]): string {\n  const lines: string[] = []\n  for (const mod of modules) {\n    lines.push(` - ${formatModuleName(mod.name)} (${formatSize(mod.renderedLength)})`)\n  }\n\n  return lines.join('\\n')\n}\n\nfunction formatModuleName(modName: string): string {\n  const delimiter = '/node_modules/'\n  const nodeIndex = modName.lastIndexOf(delimiter)\n  return nodeIndex === -1 ? modName : modName.slice(nodeIndex + delimiter.length)\n}\n\nfunction formatSize(bytes: number): string {\n  return chalk.cyan(`${(bytes / 1024).toFixed()} kB`)\n}\n"],"names":["defineTrace","path","resolveFrom","fs","semver","build","createExternalFromImportMap","readPackageJson","promisify","rimrafCallback","getTimer","telemetry","noopLogger","checkStudioDependencyVersions","checkRequiredDependencies","info","chalk","buildStaticFiles"],"mappings":";;;;;;AAEO,MAAM,aAAaA,UAAAA,YAAkC;AAAA,EAC1D,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aAAa;AACf,CAAC,GCIK,aAAa,UAqDb,iBAAgC;AAAA,EACpC,OAAS;AAAA,IACP,WAAW;AAAA,MACT,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,MACrB,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,IACpB;AAAA,IACA,WAAW;AAAA,MACT,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,MACrB,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,WAAW;AAAA,MACT,KAAK;AAAA,MACL,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,oBAAoB;AAAA,MACpB,YAAY;AAAA,MACZ,oBAAoB;AAAA,MACpB,kBAAkB;AAAA,IACpB;AAAA,IACA,WAAW;AAAA,MACT,KAAK;AAAA,MACL,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,oBAAoB;AAAA,MACpB,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EACA,qBAAqB;AAAA,IACnB,UAAU;AAAA,MACR,KAAK;AAAA,MACL,kBAAkB;AAAA,IACpB;AAAA,EACF;AACF;AAYA,eAAsB,wBAAwB;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACF,GAAwD;AAvHxD,MAAA;AAyHE,QAAM,MAAMC,cAAA,QAAK,SAAS,QAAQ,OAAOA,cAAAA,QAAK,QAAQ,GAAG,CAAC,GACpD,QAAgC,CAAA,GAChC,UAAkC,CAAA;AAGxC,aAAW,CAAC,aAAa,MAAM,KAAK,OAAO,QAAQ,cAAc,GAAG;AAC5D,UAAA,kBAAkBC,6BAAY,OAAO,KAAKD,sBAAK,KAAK,aAAa,cAAc,CAAC;AACtF,QAAI,CAAC;AACH,YAAM,IAAI;AAAA,QACR,4CAA4C,WAAW,qBAAqB,GAAG;AAAA,MAAA;AAI/E,QAAA;AAEA,QAAA;AAEY,oBAAA,KAAK,MAAM,MAAME,YAAA,QAAG,SAAS,SAAS,iBAAiB,OAAO,CAAC;AAAA,aACtE,GAAG;AACV,YAAM,UAAU,4CAA4C,WAAW,qBAAqB,GAAG;AAC/F,YAAI,QAAO,KAAG,OAAA,SAAA,EAAA,YAAY,YAExB,EAAE,UAAU,GAAG,OAAO,KAAK,EAAE,OAAO,IAC9B,KAGF,IAAI,MAAM,SAAS,EAAC,OAAO,EAAE,CAAA;AAAA,IACrC;AAGA,UAAM,WAAU,KAAOC,gBAAAA,QAAA,OAAO,YAAY,OAAO,MAAjC,OAAoC,SAAA,GAAA;AACpD,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,4BAA4B,YAAY,OAAO,WAAW,WAAW,GAAG;AAIpF,UAAA,eAAe,OAAO,KAAK,MAAM,EAAE,KAAK,CAAC,QAAQ,WAAW;AAC1D,YAAA,OAAOA,wBAAO,WAAW,MAAM,GAC/B,OAAOA,gBAAA,QAAO,WAAW,MAAM;AAErC,UAAI,CAAC,KAAM,OAAM,IAAI,MAAM,0BAA0B,MAAM,GAAG;AAC9D,UAAI,CAAC,KAAM,OAAM,IAAI,MAAM,0BAA0B,MAAM,GAAG;AAG9D,aAAOA,gBAAAA,QAAO,SAAS,KAAK,SAAS,KAAK,OAAO;AAAA,IAClD,CAAA,GAGK,eAAe,aAAa,KAAK,CAAC,UAAUA,gBAAO,QAAA,UAAU,SAAS,KAAK,CAAC;AAElF,QAAI,CAAC,cAAc;AACjB,YAAM,MAAMA,gBAAO,QAAA,WAAW,aAAa,aAAa,SAAS,CAAC,CAAC;AACnE,YAAK,MAIDA,gBAAA,QAAO,GAAG,IAAI,SAAS,OAAO,IAC1B,IAAI,MAAM,YAAY,WAAW,uBAAuB,IAAI,OAAO,GAAG,IAGxE,IAAI,MAAM,YAAY,OAAO,iBAAiB,WAAW,yBAAyB,IAPhF,IAAI,MAAM,iDAAiD,WAAW,GAAG;AAAA,IAQnF;AAEM,UAAA,WAAW,OAAO,YAAY;AAGpC,eAAW,CAAC,SAAS,kBAAkB,KAAK,OAAO,QAAQ,QAAQ,GAAG;AAC9D,YAAA,cAAcH,cAAAA,QAAK,QAAQ,eAAe,GAC1C,aAAaC,qBAAAA,QAAY,OAAO,aAAa,kBAAkB;AAErE,UAAI,CAAC;AACH,cAAM,IAAI;AAAA,UACR,kCAAkCD,cAAAA,QAAK,KAAK,aAAa,kBAAkB,CAAC;AAAA,QAAA;AAI1E,YAAA,YAAYA,cAAAA,QAAK,MAAM,KAAK,aAAa,OAAO,GAChD,YAAYA,sBAAK,MAAM;AAAA,QAC3B;AAAA,QACAA,cAAAA,QAAK,SAAS,aAAa,SAAS,KAAK;AAAA,MAAA;AAG3C,YAAM,SAAS,IAAI,YACnB,QAAQ,SAAS,IAAIA,sBAAK,MAAM,KAAK,KAAK,UAAU,YAAY,GAAG,SAAS,MAAM;AAAA,IACpF;AAAA,EACF;AAMI,MAAA,cAAe,MAAMI,WAAM;AAAA;AAAA;AAAA,IAG7B,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,UAAU;AAAA,IAEV,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ,EAAC,wBAAwB,KAAK,UAAU,YAAY,EAAC;AAAA,IAE7D,OAAO;AAAA,MACL,QAAQ;AAAA,MACR,aAAa;AAAA;AAAA,MACb,QAAQJ,cAAA,QAAK,KAAK,WAAW,UAAU;AAAA,MACvC,KAAK,EAAC,OAAO,SAAS,CAAC,IAAI,EAAC;AAAA,MAC5B,eAAe;AAAA,QACb,UAAUK,QAAAA,4BAA4B,EAAC,SAAQ;AAAA,QAC/C,QAAQ;AAAA,UACN,gBAAgB;AAAA,UAChB,gBAAgB;AAAA,UAChB,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,QACA,WAAW,EAAC,QAAQ,cAAa;AAAA,MACnC;AAAA,IACF;AAAA,EAAA,CACD;AAED,gBAAc,MAAM,QAAQ,WAAW,IAAI,cAAc,CAAC,WAAW;AAG/D,QAAA,gBAAwC,IACxC,SAAS,YAAY,QAAQ,CAAC,MAAM,EAAE,MAAM;AAElD,aAAW,SAAS;AAClB,QAAI,MAAM,SAAS;AAEnB,iBAAW,CAAC,WAAW,YAAY,KAAK,OAAO,QAAQ,OAAO;AACxD,qBAAa,SAAS,GAAG,MAAM,IAAI,MAAM,MAC3C,cAAc,SAAS,IAAIL,cAAAA,QAAK,MAAM,KAAK,KAAK,UAAU,YAAY,MAAM,QAAQ;AAKnF,SAAA;AACT;AC3PA,eAAe,yBAAyB,SAAuB,KAAa;AACtE,MAAA;AAEF,YADY,MAAM,QAAQ,KAAK,EAAC,QAAQ,QAAQ,UAAU,SAAS,CAAA,GACxD,QAAQ,IAAI,oBAAoB;AAAA,WACpC,KAAK;AACZ,UAAM,IAAI,MAAM,sCAAsC,GAAG,KAAK,IAAI,OAAO,EAAE;AAAA,EAC7E;AACF;AA4BA,eAAsB,gCACpB,oBACA,SACA,UAAU,WAAW,OAC4B;AAC3C,QAAA,WAAWM,uBAAgBN,cAAAA,QAAK,KAAK,SAAS,cAAc,CAAC,GAC7D,eAAe,EAAC,GAAG,SAAS,cAAc,GAAG,SAAS,gBAAe,GAErE,qBAA6D,CAAA,GAG7D,6BAA6B,OAAO,QAAQ,kBAAkB,EAAE;AAAA,IACpE,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,SAAS,GAAG;AAAA,EAAA;AAG9B,aAAW,CAAC,KAAK,KAAK,KAAK,4BAA4B;AACrD,UAAM,kBAAkB,MAAM,yBAAyB,SAAS,KAAK;AAErE,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,sCAAsC,KAAK,EAAE;AAG/D,UAAM,aAAa,aAAa,GAAG,GAC7B,eAAeC,qBAAY,QAAA,OAAO,SAASD,cAAAA,QAAK,KAAK,KAAK,cAAc,CAAC,GAEzE,YAAYG,gBAAAA,QAAO;AAAA,MACvB,eAAeG,OAAA,gBAAgB,YAAY,EAAE,UAAU;AAAA,IAAA;AAGzD,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,yCAAyC,GAAG,EAAE;AAG3DH,oBAAO,QAAA,GAAG,iBAAiB,UAAU,OAAO,KAC/C,mBAAmB,KAAK,EAAC,KAAK,WAAW,UAAU,SAAS,QAAQ,iBAAgB;AAAA,EAExF;AAEO,SAAA;AACT;ACxEA,MAAM,eACJ,QAAQ,IAAI,wBAAwB,YAChC,4BACA;AAKC,SAAS,uBAAuB,SAAuC;AACtE,QAAA,YAAY,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,CAAC;AAExB,SAAA;AAAA,IACzB,QAAU,GAAG,YAAY,8BAA8B,OAAO,IAAI,SAAS;AAAA,IAC3E,WAAW,GAAG,YAAY,8BAA8B,OAAO,IAAI,SAAS;AAAA,IAC5E,kBAAkB,GAAG,YAAY,uCAAuC,OAAO,IAAI,SAAS;AAAA,IAC5F,mBAAmB,GAAG,YAAY,uCAAuC,OAAO,IAAI,SAAS;AAAA,EAAA;AAIjG;ACVA,MAAM,SAASI,UAAAA,UAAUC,gBAAAA,OAAc;AAWT,eAAA,kBAC5B,MACA,SACA,WACgC;AAlClC,MAAA,IAAA;AAmCE,QAAM,QAAQC,OAAAA,YACR,EAAC,QAAQ,QAAQ,SAAS,WAAWC,WAAAA,cAAYC,UAAAA,eAAc,SAC/D,QAAuC;AAAA,IAC3C,QAAU;AAAA,IACV,OAAS;AAAA,IACT,eAAe;AAAA,IACf,GAAG,KAAK;AAAA,EACV,GAKM,iBAAiB,CAAQ,EAAA,MAAM,OAAO,MAAM,IAC5C,mBAAmBX,sBAAK,QAAQA,cAAA,QAAK,KAAK,SAAS,MAAM,CAAC,GAC1D,YAAYA,cAAA,QAAK,QAAQ,KAAK,mBAAmB,CAAC,KAAK,gBAAgB;AAE7E,QAAMY,OAAAA,8BAA8B,OAAO;AAI3C,QAAM,EAAC,YAAY,uBAAA,IAA0B,MAAMC,iCAA0B,OAAO;AAChF,MAAA;AACK,WAAA,EAAC,YAAY;AAGtB,QAAM,qBACJ,MAAM,cAAc,KACnB,aAAa,iBAAiB,aAAa,UAAU,gBAAgB,IAGlE,wBAAuB,KAAAV,gBAAA,QAAO,OAAO,sBAAsB,MAApC,OAAuC,SAAA,GAAA;AACpE,MAAI,sBAAsB,CAAC;AACzB,UAAM,IAAI,MAAM,6CAA6C,sBAAsB,EAAE;AAEjF,QAAA,UAAU,mBAAmB,IAAI,oBAAoB,EAAE,GACvD,qBAAqB,uBAAuB,OAAO;AAEzD,MAAI,oBAAoB;AACf,WAAA,MAAM,GAAGW,WAAAA,IAAI,qCAAqC;AAGrD,QAAA;AACF,YAAM,SAAS,MAAM,gCAAgC,oBAAoB,OAAO;AAGhF,UAAI,yBAAQ,UAAU,CAAC,kBAYjB,CAXmB,MAAM,OAAO,OAAO;AAAA,QACzC,MAAM;AAAA,QACN,SAASC,eAAM,QAAA;AAAA,UACb;AAAA;AAAA;AAAA,EAEK,OAAO,IAAI,CAAC,QAAQ,MAAM,IAAI,GAAG,oBAAoB,IAAI,SAAS,sBAAsB,IAAI,MAAM,GAAG,EAAE,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA;AAAA,QAExH;AAAA,QACA,SAAS;AAAA,MAAA,CACV;AAGQ,eAAA,QAAQ,KAAK,CAAC;AAAA,aAGlB,KAAK;AACN,YAAA;AAAA,IACR;AAAA,EACF;AAEA,QAAM,aAAa;AACf,aAAW,SAAS,MACtB,OAAO;AAAA,IACL;AAAA;AAAA,EAAA,GAEF,WAAW,QAAQ,CAAC,QAAQ,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC,GACpD,OAAO,MAAM,EAAE;AAGjB,MAAI,cAAc;AACd,gBAAc,oBAAoB,CAAC,mBACrC,cAAc,MAAM,OAAO,OAAO;AAAA,IAChC,MAAM;AAAA,IACN,SAAS,iDAAiD,SAAS;AAAA,IACnE,SAAS;AAAA,EACV,CAAA;AAIH,MAAI,WAAW;AACf,QAAM,cAAc,QAAQ,IAAI,wBAC1B,kBAAiB,KAAA,aAAA,OAAA,SAAA,UAAW,YAAX,OAAoB,SAAA,GAAA;AAGvC,eAAW,QAAA,UAAA,WACb,WAAW,UAAU,WACZ,cAET,WAAW,cACF,mBAET,WAAW,iBAGT,eAAe,kBACjB,OAAO;AAAA,IACL,oCAAoC,cAAc,2CAA2C,WAAW;AAAA,EAAA;AAIxG,MAAA;AAEJ,MAAI,aAAa;AACf,UAAM,MAAM,mBAAmB,GAC/B,OAAO,OAAO,QAAQ,qBAAqB,EAAE,MAAM,GACnD,MAAM,OAAO,SAAS;AAChB,UAAA,gBAAgB,MAAM,IAAI,mBAAmB;AACnD,SAAK,OAAO,wBAAwB,cAAc,QAAS,CAAA,OAC3D,KAAK;EACP;AAEA,SAAO,OAAO,QAAQ,qBAAqB,EAAE,MAAM;AAE7C,QAAA,QAAQL,YAAU,MAAM,UAAU;AACxC,QAAM,MAAM;AAER,MAAA;AAEA,yBACF,YAAY;AAAA,IACV,SAAS;AAAA,MACP,GAAI,MAAM,wBAAwB,EAAC,KAAK,SAAS,WAAW,UAAS;AAAA,MACrE,GAAG;AAAA,IACL;AAAA,EAAA;AAIA,MAAA;AACF,UAAM,MAAM,cAAc;AAEpB,UAAA,SAAS,MAAMM,+BAAiB;AAAA,MACpC,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,WAAW,CAAQ,CAAA,MAAM,aAAa;AAAA,MACtC,QAAQ,EAAQ,MAAM;AAAA,MACtB,MAAM,aAAa,UAAU,YAAY,UAAU,OAAO;AAAA,MAC1D;AAAA,IAAA,CACD;AAED,UAAM,IAAI;AAAA,MACR,YAAY,OAAO,OAChB,QAAQ,CAAC,UAAU,MAAM,QAAQ,QAAQ,CAAC,QAAQ,IAAI,cAAc,CAAC,EACrE,OAAO,CAAC,KAAK,MAAM,MAAM,GAAG,CAAC;AAAA,IAAA,CACjC;AACK,UAAA,gBAAgB,MAAM,IAAI,cAAc;AAE9C,SAAK,OAAO,wBAAwB,cAAc,QAAA,CAAS,OAC3D,KAAK,QAAQ,GACb,MAAM,SAAS,GACX,MAAM,UACR,OAAO,MAAM;AAAA,sBAAyB,GACtC,OAAO,MAAM,kBAAkB,kBAAkB,OAAO,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,WAExE,KAAK;AACZ,UAAA,KAAK,QACL,MAAM,MAAM,GAAG,GACT;AAAA,EACR;AAEO,SAAA,EAAC,YAAY;AACtB;AAGA,SAAS,iBAAiB,MAA0C,QAAQ,KAAe;AACzF,SAAO,OAAO,KAAK,GAAG,EAAE,OAAO,CAAC,QAAQ,IAAI,YAAY,EAAE,WAAW,gBAAgB,CAAC;AACxF;AAEA,SAAS,kBAAkB,QAAqC;AAC9D,SAAO,OACJ,QAAQ,CAAC,UAAU,MAAM,OAAO,EAChC,KAAK,CAAC,MAAM,SAAS,KAAK,iBAAiB,KAAK,cAAc;AACnE;AAEA,SAAS,kBAAkB,SAAgC;AACzD,QAAM,QAAkB,CAAA;AACxB,aAAW,OAAO;AACV,UAAA,KAAK,MAAM,iBAAiB,IAAI,IAAI,CAAC,KAAK,WAAW,IAAI,cAAc,CAAC,GAAG;AAGnF,SAAO,MAAM,KAAK;AAAA,CAAI;AACxB;AAEA,SAAS,iBAAiB,SAAyB;AACjD,QAAM,YAAY,kBACZ,YAAY,QAAQ,YAAY,SAAS;AAC/C,SAAO,cAAc,KAAK,UAAU,QAAQ,MAAM,YAAY,UAAU,MAAM;AAChF;AAEA,SAAS,WAAW,OAAuB;AACzC,SAAOD,uBAAM,KAAK,IAAI,QAAQ,MAAM,QAAA,CAAS,KAAK;AACpD;;"}