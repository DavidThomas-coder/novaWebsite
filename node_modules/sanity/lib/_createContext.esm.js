import { createContext } from "react";
import { SANITY_VERSION } from "./_legacy/version.esm.js";
const MISSING_CONTEXT_HELP_URL = "https://www.sanity.io/help/missing-context-error";
function createGlobalScopedContext(key, defaultValue) {
  const symbol = Symbol.for(key);
  if (typeof document > "u")
    return createContext(defaultValue);
  if (!globalScope[symbol])
    globalScope[symbol] = { context: createContext(defaultValue), version: SANITY_VERSION };
  else {
    if (globalScope[symbol].version !== SANITY_VERSION)
      throw new TypeError(
        `Duplicate instances of context "${key}" with incompatible versions detected: Expected ${SANITY_VERSION} but got ${globalScope[symbol].version}.

For more information, please visit ${MISSING_CONTEXT_HELP_URL}`
      );
    warned.has(SANITY_VERSION) || (console.warn(
      `Duplicate instances of context "${key}" detected. This is likely a mistake and may cause unexpected behavior.

For more information, please visit ${MISSING_CONTEXT_HELP_URL}`
    ), warned.add(SANITY_VERSION));
  }
  return globalScope[symbol].context;
}
const warned = /* @__PURE__ */ new Set();
function getGlobalScope() {
  if (typeof globalThis < "u") return globalThis;
  if (typeof window < "u") return window;
  if (typeof self < "u") return self;
  if (typeof global < "u") return global;
  throw new Error("sanity: could not locate global scope");
}
const globalScope = getGlobalScope();
export {
  createGlobalScopedContext as createContext
};
//# sourceMappingURL=_createContext.esm.js.map
