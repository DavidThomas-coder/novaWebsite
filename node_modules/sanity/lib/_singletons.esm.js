import { createContext } from "react";
import { createContext as createContext$1 } from "sanity/_createContext";
const ChangeIndicatorTrackerContextStore = createContext(null), ChangeIndicatorTrackerContextGetSnapshot = createContext(null), ConnectorContext = createContext({
  isReviewChangesOpen: !1,
  onOpenReviewChanges: () => {
  },
  onSetFocus: () => {
  }
}), PreviewCardContext = createContext({ selected: !1 }), ScrollContext = createContext(null), zIndexContextDefaults = {
  navbar: 200,
  navbarPopover: 5e5,
  navbarDialog: 500001,
  // pane
  pane: 100,
  paneHeader: [110, 15e3],
  paneFooter: [120, 2e4],
  paneResizer: [130, 25e3],
  paneDialog: [140, 5e3],
  //
  popover: 200,
  modal: 200,
  movingItem: 1e4,
  drawershade: 1e6,
  drawer: 1000001,
  fullscreen: 12e5,
  toast: [100, 11e3],
  // NOT IN USE
  portal: 200,
  dropdown: 200,
  navbarFixed: 1010,
  fullscreenEdit: 1050,
  popoverBackground: 1060,
  tooltip: 200,
  modalBackground: 2e3,
  spinner: 3e3
}, ZIndexContext = createContext(zIndexContextDefaults), DiffContext = createContext({ path: [] }), DocumentChangeContext = createContext(null), DocumentIdContext = createContext(null), FieldActionsContext = createContext({
  actions: [],
  focused: !1,
  hovered: !1,
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  }
}), HoveredFieldContext = createContext({
  hoveredStack: [],
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  }
}), FormBuilderContext = createContext(null), FormValueContext = createContext$1(
  "sanity/_singletons/context/form-value",
  null
), GetFormValueContext = createContext$1(
  "sanity/_singletons/context/get-form-value",
  null
), VirtualizerScrollInstanceContext = createContext(
  null
), SortableItemIdContext = createContext(null), PortableTextMarkersContext = createContext([]), PortableTextMemberItemsContext = createContext([]), ReferenceItemRefContext = createContext(null), DocumentFieldActionsContext = createContext(
  null
), FormCallbacksContext = createContext(null), PresenceContext = createContext([]), ReferenceInputOptionsContext = createContext({}), ReviewChangesContext = createContext(null), TreeEditingEnabledContext = createContext({
  enabled: !1,
  legacyEditing: !1
}), ValidationContext = createContext([]), LocaleContext = createContext$1(
  "sanity/_singletons/context/locale",
  void 0
), FormFieldPresenceContext = createContext([]), PresenceTrackerContextStore = createContext(null), PresenceTrackerContextGetSnapshot = createContext(null), DocumentActionPropsContext = createContext(void 0), ScheduledPublishingEnabledContext = createContext(null), SchedulePublishUpsellContext = createContext({
  upsellData: null,
  handleOpenDialog: () => null,
  upsellDialogOpen: !1,
  telemetryLogs: {
    dialogSecondaryClicked: () => null,
    dialogPrimaryClicked: () => null,
    panelViewed: () => null,
    panelDismissed: () => null,
    panelPrimaryClicked: () => null,
    panelSecondaryClicked: () => null
  }
}), SchedulesContext = createContext(void 0), ResourceCacheContext = createContext$1(
  "sanity/_singletons/context/resource-cache",
  null
), ActiveWorkspaceMatcherContext = createContext$1(
  "sanity/_singletons/context/active-workspace-matcher",
  null
), AddonDatasetContext = createContext(null), ColorSchemeSetValueContext = createContext(null), ColorSchemeValueContext = createContext(null), FreeTrialContext = createContext(void 0), CalendarContext = createContext(void 0), SearchContext = createContext(void 0), CopyPasteContext = createContext(null), NavbarContext = createContext({
  onSearchFullscreenOpenChange: () => "",
  onSearchOpenChange: () => "",
  searchFullscreenOpen: !1,
  searchFullscreenPortalEl: null,
  searchOpen: !1
}), RouterHistoryContext = createContext(null), SourceContext = createContext$1("sanity/_singletons/context/source", null), WorkspaceContext = createContext$1(
  "sanity/_singletons/context/workspace",
  null
), WorkspacesContext = createContext$1(
  "sanity/_singletons/context/workspaces",
  null
), TasksEnabledContext = createContext({
  enabled: !1,
  mode: null
}), IsLastPaneContext = createContext(!1), MentionUserContext = createContext(null), TasksNavigationContext = createContext(null), TasksContext = createContext(null), TasksUpsellContext = createContext(null), UserColorManagerContext = createContext(null), RouterContext = createContext$1(
  "sanity/_singletons/context/router",
  null
), CommentsAuthoringPathContext = createContext(
  null
), CommentsContext = createContext(null), CommentInputContext = createContext(null), CommentsEnabledContext = createContext({
  enabled: !1,
  mode: null
}), CommentsIntentContext = createContext$1(
  "sanity/_singletons/context/comments-intent",
  void 0
), CommentsOnboardingContext = createContext(null), CommentsSelectedPathContext = createContext(
  null
), CommentsUpsellContext = createContext(null), PaneContext = createContext$1(
  "sanity/_singletons/context/pane",
  null
), PaneLayoutContext = createContext$1(
  "sanity/_singletons/context/pane-layout",
  null
);
function missingContext() {
  throw new Error("Pane is missing router context");
}
const PaneRouterContext = createContext$1(
  "sanity/_singletons/context/pane-router",
  {
    index: 0,
    groupIndex: 0,
    siblingIndex: 0,
    payload: void 0,
    params: {},
    hasGroupSiblings: !1,
    groupLength: 0,
    routerPanesState: [],
    BackLink: () => missingContext(),
    ChildLink: () => missingContext(),
    ReferenceChildLink: () => missingContext(),
    handleEditReference: () => missingContext(),
    ParameterizedLink: () => missingContext(),
    replaceCurrent: () => missingContext(),
    closeCurrentAndAfter: () => missingContext(),
    closeCurrent: () => missingContext(),
    duplicateCurrent: () => missingContext(),
    setView: () => missingContext(),
    setParams: () => missingContext(),
    setPayload: () => missingContext(),
    navigateIntent: () => missingContext(),
    createPathWithParams: () => missingContext()
  }
), DocumentPaneContext = createContext$1(
  "sanity/_singletons/context/document-pane",
  null
), DocumentSheetListContext = createContext(
  void 0
), StructureToolContext = createContext$1(
  "sanity/_singletons/context/structure-tool",
  null
);
export {
  ActiveWorkspaceMatcherContext,
  AddonDatasetContext,
  CalendarContext,
  ChangeIndicatorTrackerContextGetSnapshot,
  ChangeIndicatorTrackerContextStore,
  ColorSchemeSetValueContext,
  ColorSchemeValueContext,
  CommentInputContext,
  CommentsAuthoringPathContext,
  CommentsContext,
  CommentsEnabledContext,
  CommentsIntentContext,
  CommentsOnboardingContext,
  CommentsSelectedPathContext,
  CommentsUpsellContext,
  ConnectorContext,
  CopyPasteContext,
  DiffContext,
  DocumentActionPropsContext,
  DocumentChangeContext,
  DocumentFieldActionsContext,
  DocumentIdContext,
  DocumentPaneContext,
  DocumentSheetListContext,
  FieldActionsContext,
  FormBuilderContext,
  FormCallbacksContext,
  FormFieldPresenceContext,
  FormValueContext,
  FreeTrialContext,
  GetFormValueContext,
  HoveredFieldContext,
  IsLastPaneContext,
  LocaleContext,
  MentionUserContext,
  NavbarContext,
  PaneContext,
  PaneLayoutContext,
  PaneRouterContext,
  PortableTextMarkersContext,
  PortableTextMemberItemsContext,
  PresenceContext,
  PresenceTrackerContextGetSnapshot,
  PresenceTrackerContextStore,
  PreviewCardContext,
  ReferenceInputOptionsContext,
  ReferenceItemRefContext,
  ResourceCacheContext,
  ReviewChangesContext,
  RouterContext,
  RouterHistoryContext,
  SchedulePublishUpsellContext,
  ScheduledPublishingEnabledContext,
  SchedulesContext,
  ScrollContext,
  SearchContext,
  SortableItemIdContext,
  SourceContext,
  StructureToolContext,
  TasksContext,
  TasksEnabledContext,
  TasksNavigationContext,
  TasksUpsellContext,
  TreeEditingEnabledContext,
  UserColorManagerContext,
  ValidationContext,
  VirtualizerScrollInstanceContext,
  WorkspaceContext,
  WorkspacesContext,
  ZIndexContext,
  zIndexContextDefaults
};
//# sourceMappingURL=_singletons.esm.js.map
