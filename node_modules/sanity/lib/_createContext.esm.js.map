{"version":3,"file":"_createContext.esm.js","sources":["../src/_createContext/createGlobalScopedContext.ts"],"sourcesContent":["import {type Context, createContext} from 'react'\n\nimport {SANITY_VERSION} from '../core/version'\n\nconst MISSING_CONTEXT_HELP_URL = 'https://www.sanity.io/help/missing-context-error'\n\n/**\n * @internal\n * @hidden\n */\nexport function createGlobalScopedContext<ContextType, const T extends ContextType = ContextType>(\n  /**\n   * It's important to prefix these keys as they are global\n   */\n  key: `sanity/_singletons/context/${string}`,\n  defaultValue: T,\n): Context<ContextType> {\n  const symbol = Symbol.for(key)\n\n  /**\n   * Prevent errors about re-renders on React SSR on Next.js App Router\n   */\n  if (typeof document === 'undefined') {\n    return createContext<ContextType>(defaultValue)\n  }\n\n  if (!globalScope[symbol]) {\n    globalScope[symbol] = {context: createContext<T>(defaultValue), version: SANITY_VERSION}\n  } else if (globalScope[symbol].version !== SANITY_VERSION) {\n    throw new TypeError(\n      `Duplicate instances of context \"${key}\" with incompatible versions detected: Expected ${SANITY_VERSION} but got ${globalScope[symbol].version}.\\n\\n` +\n        `For more information, please visit ${MISSING_CONTEXT_HELP_URL}`,\n    )\n  } else if (!warned.has(SANITY_VERSION)) {\n    console.warn(\n      `Duplicate instances of context \"${key}\" detected. This is likely a mistake and may cause unexpected behavior.\\n\\n` +\n        `For more information, please visit ${MISSING_CONTEXT_HELP_URL}`,\n    )\n    warned.add(SANITY_VERSION)\n  }\n\n  return globalScope[symbol].context\n}\n\nconst warned = new Set<typeof SANITY_VERSION>()\n\n/**\n * Gets the global scope instance in a given environment.\n *\n * The strategy is to return the most modern, and if not, the most common:\n * - The `globalThis` variable is the modern approach to accessing the global scope\n * - The `window` variable is the global scope in a web browser\n * - The `self` variable is the global scope in workers and others\n * - The `global` variable is the global scope in Node.js\n */\nfunction getGlobalScope() {\n  if (typeof globalThis !== 'undefined') return globalThis\n  if (typeof window !== 'undefined') return window\n  if (typeof self !== 'undefined') return self\n  if (typeof global !== 'undefined') return global\n\n  throw new Error('sanity: could not locate global scope')\n}\n\nconst globalScope = getGlobalScope() as any\n"],"names":[],"mappings":";;AAIA,MAAM,2BAA2B;AAMjB,SAAA,0BAId,KACA,cACsB;AAChB,QAAA,SAAS,OAAO,IAAI,GAAG;AAK7B,MAAI,OAAO,WAAa;AACtB,WAAO,cAA2B,YAAY;AAG5C,MAAA,CAAC,YAAY,MAAM;AACT,gBAAA,MAAM,IAAI,EAAC,SAAS,cAAiB,YAAY,GAAG,SAAS;OACpE;AAAI,QAAA,YAAY,MAAM,EAAE,YAAY;AACzC,YAAM,IAAI;AAAA,QACR,mCAAmC,GAAG,mDAAmD,cAAc,YAAY,YAAY,MAAM,EAAE,OAAO;AAAA;AAAA,qCACtG,wBAAwB;AAAA,MAAA;AAExD,WAAO,IAAI,cAAc,MACnC,QAAQ;AAAA,MACN,mCAAmC,GAAG;AAAA;AAAA,qCACE,wBAAwB;AAAA,IAClE,GACA,OAAO,IAAI,cAAc;AAAA,EAAA;AAGpB,SAAA,YAAY,MAAM,EAAE;AAC7B;AAEA,MAAM,6BAAa;AAWnB,SAAS,iBAAiB;AACpB,MAAA,OAAO,aAAe,IAAoB,QAAA;AAC1C,MAAA,OAAO,SAAW,IAAoB,QAAA;AACtC,MAAA,OAAO,OAAS,IAAoB,QAAA;AACpC,MAAA,OAAO,SAAW,IAAoB,QAAA;AAEpC,QAAA,IAAI,MAAM,uCAAuC;AACzD;AAEA,MAAM,cAAc,eAAe;"}