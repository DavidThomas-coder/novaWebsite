{"version":3,"file":"index.js","sources":["../src/getSchemaTypeIcon.ts","../src/InsertMenu.tsx"],"sourcesContent":["import {type ReferenceSchemaType, type SchemaType} from '@sanity/types'\nimport {type ComponentType} from 'react'\n\n/** @internal */\nexport function getSchemaTypeIcon(schemaType: SchemaType): ComponentType | undefined {\n  // Use reference icon if reference is to one schemaType only\n  const referenceIcon =\n    isReferenceSchemaType(schemaType) && (schemaType.to ?? []).length === 1\n      ? schemaType.to[0].icon\n      : undefined\n\n  return schemaType.icon ?? schemaType.type?.icon ?? referenceIcon\n}\n\nfunction isReferenceSchemaType(type: unknown): type is ReferenceSchemaType {\n  return isRecord(type) && (type['name'] === 'reference' || isReferenceSchemaType(type['type']))\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value == 'object' || typeof value == 'function')\n}\n","import {SearchIcon, ThLargeIcon, UlistIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Menu,\n  MenuItem,\n  type MenuItemProps,\n  Stack,\n  Tab,\n  TabList,\n  Text,\n  TextInput,\n  Tooltip,\n} from '@sanity/ui'\nimport startCase from 'lodash.startcase'\nimport {type ChangeEvent, createElement, type CSSProperties, useReducer, useState} from 'react'\nimport {isValidElementType} from 'react-is'\n\nimport {getSchemaTypeIcon} from './getSchemaTypeIcon'\nimport type {InsertMenuOptions} from './InsertMenuOptions'\n\ntype InsertMenuGroup = NonNullable<InsertMenuOptions['groups']>[number] & {selected: boolean}\ntype InsertMenuViews = NonNullable<InsertMenuOptions['views']>\ntype InsertMenuView = InsertMenuViews[number]\n\ntype InsertMenuEvent =\n  | {type: 'toggle view'; name: InsertMenuView['name']}\n  | {type: 'change query'; query: string}\n  | {type: 'select group'; name: string | undefined}\n\ntype InsertMenuState = {\n  query: string\n  groups: Array<InsertMenuGroup>\n  views: Array<InsertMenuViews[number] & {selected: boolean}>\n}\n\nfunction fullInsertMenuReducer(state: InsertMenuState, event: InsertMenuEvent): InsertMenuState {\n  return {\n    query: event.type === 'change query' ? event.query : state.query,\n    groups:\n      event.type === 'select group'\n        ? state.groups.map((group) => ({...group, selected: event.name === group.name}))\n        : state.groups,\n    views:\n      event.type === 'toggle view'\n        ? state.views.map((view) => ({...view, selected: event.name === view.name}))\n        : state.views,\n  }\n}\n\nconst ALL_ITEMS_GROUP_NAME = 'all-items'\n\nconst gridStyle: CSSProperties = {\n  gridTemplateColumns: 'repeat(auto-fill, minmax(118px, 1fr))',\n}\n\n/** @alpha */\nexport type InsertMenuProps = InsertMenuOptions & {\n  schemaTypes: Array<SchemaType>\n  onSelect: (schemaType: SchemaType) => void\n  labels: {\n    'insert-menu.filter.all-items': string\n    'insert-menu.search.no-results': string\n    'insert-menu.search.placeholder': string\n    'insert-menu.toggle-grid-view.tooltip': string\n    'insert-menu.toggle-list-view.tooltip': string\n  }\n}\n\n/** @alpha */\nexport function InsertMenu(props: InsertMenuProps): React.JSX.Element {\n  const showIcons = props.showIcons === undefined ? true : props.showIcons\n  const showFilter =\n    props.filter === undefined || props.filter === 'auto'\n      ? props.schemaTypes.length > 5\n      : props.filter\n  const [state, send] = useReducer(fullInsertMenuReducer, {\n    query: '',\n    groups: props.groups\n      ? [\n          {\n            name: ALL_ITEMS_GROUP_NAME,\n            title: props.labels['insert-menu.filter.all-items'],\n            selected: true,\n          },\n          ...props.groups.map((group) => ({...group, selected: false})),\n        ]\n      : [],\n    views: (props.views ?? [{name: 'list'}]).map((view, index) => ({\n      ...view,\n      selected: index === 0,\n    })),\n  })\n  const filteredSchemaTypes = filterSchemaTypes(props.schemaTypes, state.query, state.groups)\n  const selectedView = state.views.find((view) => view.selected)\n  const showingFilterOrViews = showFilter || state.views.length > 1\n  const showingTabs = state.groups && state.groups.length > 0\n  const showingAnyOptions = showingFilterOrViews || showingTabs\n\n  return (\n    <Menu padding={0}>\n      <Flex direction=\"column\" height=\"fill\">\n        <Box\n          {...(showingAnyOptions\n            ? {\n                style: {borderBottom: '1px solid var(--card-border-color)'},\n                paddingBottom: 1,\n              }\n            : {})}\n        >\n          {/* filter and views button */}\n          {showingFilterOrViews ? (\n            <Flex flex=\"none\" align=\"center\" paddingTop={1} paddingX={1} gap={1}>\n              {showFilter ? (\n                <Box flex={1}>\n                  <TextInput\n                    autoFocus\n                    border={false}\n                    fontSize={1}\n                    icon={SearchIcon}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      send({type: 'change query', query: event.target.value})\n                    }}\n                    placeholder={props.labels['insert-menu.search.placeholder']}\n                    value={state.query}\n                  />\n                </Box>\n              ) : null}\n              {state.views.length > 1 ? (\n                <Box flex=\"none\">\n                  <ViewToggle\n                    views={state.views}\n                    onToggle={(name) => {\n                      send({type: 'toggle view', name})\n                    }}\n                    labels={props.labels}\n                  />\n                </Box>\n              ) : null}\n            </Flex>\n          ) : null}\n\n          {/* tabs */}\n          {showingTabs ? (\n            <Box paddingTop={1} paddingX={1}>\n              <TabList space={1}>\n                {state.groups.map((group) => (\n                  <Tab\n                    id={`${group.name}-tab`}\n                    aria-controls={`${group.name}-panel`}\n                    key={group.name}\n                    label={group.title ?? startCase(group.name)}\n                    selected={group.selected}\n                    onClick={() => {\n                      send({type: 'select group', name: group.name})\n                    }}\n                  />\n                ))}\n              </TabList>\n            </Box>\n          ) : null}\n        </Box>\n\n        {/* results */}\n        <Box padding={1}>\n          {filteredSchemaTypes.length === 0 ? (\n            <Box padding={2}>\n              <Text muted size={1}>\n                {props.labels['insert-menu.search.no-results']}\n              </Text>\n            </Box>\n          ) : !selectedView ? null : selectedView.name === 'grid' ? (\n            <Grid autoRows=\"auto\" flex={1} gap={1} style={gridStyle}>\n              {filteredSchemaTypes.map((schemaType) => (\n                <GridMenuItem\n                  key={schemaType.name}\n                  icon={showIcons ? getSchemaTypeIcon(schemaType) : undefined}\n                  onClick={() => {\n                    props.onSelect(schemaType)\n                  }}\n                  previewImageUrl={selectedView.previewImageUrl?.(schemaType.name)}\n                  schemaType={schemaType}\n                />\n              ))}\n            </Grid>\n          ) : (\n            <Stack flex={1} space={1}>\n              {filteredSchemaTypes.map((schemaType) => (\n                <MenuItem\n                  key={schemaType.name}\n                  icon={showIcons ? getSchemaTypeIcon(schemaType) : undefined}\n                  onClick={() => {\n                    props.onSelect(schemaType)\n                  }}\n                  text={schemaType.title ?? startCase(schemaType.name)}\n                />\n              ))}\n            </Stack>\n          )}\n        </Box>\n      </Flex>\n    </Menu>\n  )\n}\n\nconst viewToggleIcon: Record<InsertMenuView['name'], React.ElementType> = {\n  grid: ThLargeIcon,\n  list: UlistIcon,\n}\n\nconst viewToggleTooltip: Record<InsertMenuView['name'], keyof ViewToggleProps['labels']> = {\n  grid: 'insert-menu.toggle-grid-view.tooltip',\n  list: 'insert-menu.toggle-list-view.tooltip',\n}\n\ntype ViewToggleProps = {\n  views: InsertMenuState['views']\n  onToggle: (viewName: InsertMenuView['name']) => void\n  labels: Pick<\n    InsertMenuProps['labels'],\n    'insert-menu.toggle-grid-view.tooltip' | 'insert-menu.toggle-list-view.tooltip'\n  >\n}\n\nfunction ViewToggle(props: ViewToggleProps) {\n  const viewIndex = props.views.findIndex((view) => view.selected)\n  const nextView = props.views[viewIndex + 1] ?? props.views[0]\n\n  return (\n    <Tooltip\n      content={<Text size={1}>{props.labels[viewToggleTooltip[nextView.name]]}</Text>}\n      placement=\"top\"\n      portal\n    >\n      <Button\n        mode=\"bleed\"\n        icon={viewToggleIcon[nextView.name]}\n        onClick={() => {\n          props.onToggle(nextView.name)\n        }}\n      />\n    </Tooltip>\n  )\n}\n\ntype GridMenuItemProps = {\n  onClick: () => void\n  schemaType: SchemaType\n  icon: MenuItemProps['icon']\n  previewImageUrl: ReturnType<\n    NonNullable<\n      Extract<NonNullable<InsertMenuOptions['views']>[number], {name: 'grid'}>['previewImageUrl']\n    >\n  >\n}\n\nfunction GridMenuItem(props: GridMenuItemProps) {\n  const [failedToLoad, setFailedToLoad] = useState(false)\n\n  return (\n    <MenuItem padding={0} radius={2} onClick={props.onClick} style={{overflow: 'hidden'}}>\n      <Flex direction=\"column\" gap={1} padding={1}>\n        <Box\n          flex=\"none\"\n          style={{\n            backgroundColor: 'var(--card-muted-bg-color)',\n            paddingBottom: '66.6%',\n            position: 'relative',\n          }}\n        >\n          {isValidElementType(props.icon) ? (\n            <Flex\n              align=\"center\"\n              justify=\"center\"\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n              }}\n            >\n              <Text size={1}>{createElement(props.icon)}</Text>\n            </Flex>\n          ) : null}\n          {!props.previewImageUrl || failedToLoad ? null : (\n            <img\n              src={props.previewImageUrl}\n              style={{\n                objectFit: 'contain',\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                inset: 0,\n              }}\n              onError={() => {\n                setFailedToLoad(true)\n              }}\n            />\n          )}\n\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              boxShadow: 'inset 0 0 0 0.5px var(--card-fg-color)',\n              opacity: 0.1,\n            }}\n          />\n        </Box>\n        <Box flex={1} padding={2}>\n          <Text size={1} weight=\"medium\">\n            {props.schemaType.title ?? props.schemaType.name}\n          </Text>\n        </Box>\n      </Flex>\n    </MenuItem>\n  )\n}\n\nfunction filterSchemaTypes(\n  schemaTypes: Array<SchemaType>,\n  query: string,\n  groups: Array<InsertMenuGroup>,\n) {\n  return schemaTypes.filter(\n    (schemaType) => passesGroupFilter(schemaType, groups) && passesQueryFilter(schemaType, query),\n  )\n}\n\nfunction passesQueryFilter(schemaType: SchemaType, query: string) {\n  const sanitizedQuery = query.trim().toLowerCase()\n\n  return schemaType.title\n    ? schemaType.title?.toLowerCase().includes(sanitizedQuery)\n    : schemaType.name.includes(sanitizedQuery)\n}\n\nfunction passesGroupFilter(schemaType: SchemaType, groups: Array<InsertMenuGroup>) {\n  const selectedGroup = groups.find((group) => group.selected)\n\n  return selectedGroup\n    ? selectedGroup.name === ALL_ITEMS_GROUP_NAME\n      ? true\n      : selectedGroup.of?.includes(schemaType.name)\n    : true\n}\n"],"names":["_a"],"mappings":"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"}