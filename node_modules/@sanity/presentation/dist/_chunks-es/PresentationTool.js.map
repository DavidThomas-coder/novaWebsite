{"version":3,"file":"PresentationTool.js","sources":["../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js","../../../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js","../../../channels/src/constants.ts","../../../channels/src/helpers.ts","../../../channels/src/controller.ts","../../../../node_modules/.pnpm/valibot@0.31.1/node_modules/valibot/dist/index.js","../../../visual-editing-helpers/dist/_chunks-es/transformSanityNodeData.js","../../../visual-editing-helpers/dist/index.js","../../src/lib/debounce.ts","../../src/panels/PanelsContext.tsx","../../src/panels/Panel.tsx","../../src/panels/usePanelsStorage.ts","../../src/panels/util.ts","../../src/panels/Panels.tsx","../../src/components/ErrorCard.tsx","../../src/editor/PresentationPaneRouterProvider.tsx","../../src/editor/DocumentListPane.tsx","../../src/editor/DocumentPane.tsx","../../src/editor/DocumentPanel.tsx","../../src/editor/ContentEditor.tsx","../../src/editor/usePreviewState.ts","../../src/panels/PanelResizer.tsx","../../src/panels/usePanelId.ts","../../src/PresentationContent.tsx","../../src/PresentationNavigateProvider.tsx","../../src/PresentationNavigator.tsx","../../src/useLocalState.ts","../../src/PresentationParamsProvider.tsx","../../src/PresentationProvider.tsx","../../src/reducers/presentationReducer.ts","../../src/preview/IFrame.tsx","../../src/preview/PreviewLocationInput.tsx","../../src/preview/ShareUrlMenuItems.tsx","../../src/preview/PreviewFrame.tsx","../../src/useDocumentsOnPage.ts","../../src/useMainDocument.ts","../../src/lib/parse.ts","../../src/useParams.ts","../../src/usePreviewUrl.ts","../../src/PresentationTool.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import type {ChannelMsgType} from './types'\n\nexport const RESPONSE_TIMEOUT = 1000\nexport const HEARTBEAT_INTERVAL = 1000\nexport const HANDSHAKE_INTERVAL = 500\n\nexport const INTERNAL_MSG_TYPES = [\n  'channel/disconnect',\n  'channel/response',\n  'channel/heartbeat',\n] satisfies ChannelMsgType[]\n\nexport const HANDSHAKE_MSG_TYPES = [\n  'handshake/syn',\n  'handshake/syn-ack',\n  'handshake/ack',\n] satisfies ChannelMsgType[]\n","import {HANDSHAKE_MSG_TYPES, INTERNAL_MSG_TYPES} from './constants'\nimport type {ChannelMsgType, HandshakeMsgType, InternalMsgType} from './types'\n\nexport const isInternalMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is InternalMsgType => {\n  return INTERNAL_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isHandshakeMessage = (\n  type: ChannelMsgType | InternalMsgType,\n): type is HandshakeMsgType => {\n  return HANDSHAKE_MSG_TYPES.some((t) => t === type)\n}\n\nexport const isLegacyHandshakeMessage = ({data = {}}: MessageEvent): boolean => {\n  return (\n    // Check data is a record type\n    typeof data === 'object' &&\n    data !== null &&\n    !Array.isArray(data) &&\n    // The \"domain\" key was introduced in commit 4854e7f\n    !('domain' in data) &&\n    // Check the rest of the object shape is present\n    ['id', 'type', 'from', 'to'].every((key) => key in data) &&\n    // Prior to 4854e7f only handshake events were emitted prior to an established connection\n    data.type.startsWith('handshake/')\n  )\n}\n","import {v4 as uuid} from 'uuid'\n\nimport {HANDSHAKE_INTERVAL, HEARTBEAT_INTERVAL, RESPONSE_TIMEOUT} from './constants'\nimport {isHandshakeMessage, isLegacyHandshakeMessage} from './helpers'\nimport type {\n  ChannelMsg,\n  ChannelsController,\n  ChannelsControllerChannel,\n  ChannelsControllerOptions,\n  ChannelStatus,\n  InternalMsgType,\n  ProtocolMsg,\n  ToArgs,\n} from './types'\n\nexport function createChannelsController<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): ChannelsController<ConnectionIds, Sends> {\n  type Controller = ChannelsController<ConnectionIds, Sends>\n\n  const {destroy, send} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>(config)\n  const sources = new Set<MessageEventSource>()\n  const sendToSource = new WeakMap<MessageEventSource, Controller['send']>()\n  const destroySource = new Set<Controller['destroy']>()\n\n  const sendToMany = ((id, ...args) => {\n    send(id, ...args)\n    for (const source of sources) {\n      if (source && 'closed' in source && !source.closed && sendToSource.has(source)) {\n        const send = sendToSource.get(source)\n        send!(id, ...args)\n      }\n    }\n  }) satisfies Controller['send']\n\n  const destroyMany = (() => {\n    destroy()\n    for (const destroy of destroySource) {\n      destroy()\n    }\n  }) satisfies Controller['destroy']\n\n  return {\n    destroy: destroyMany,\n    send: sendToMany,\n    addSource(source) {\n      if (sources.has(source)) {\n        return\n      }\n      if (!('closed' in source)) {\n        // eslint-disable-next-line no-console\n        console.warn('Source is unsupported', {source})\n        throw new Error('Source is unsupported')\n      }\n      if (source.closed) {\n        throw new Error('Source is closed')\n      }\n      const {send, destroy} = createChannelsControllerInternal<ConnectionIds, Sends, Receives>({\n        ...config,\n        target: source,\n        // @TODO temporary workaround for onStatusUpdate and onEvent not differentiating\n        //       iframes from popups\n        connectTo: config.connectTo.map((prevConnectTo) => {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {onStatusUpdate, onEvent, ...connectTo} = prevConnectTo\n\n          return {\n            ...connectTo,\n            onEvent: onEvent\n              ? (((...args) => {\n                  const [type] = args\n                  if (\n                    type === 'preview-kit/documents' ||\n                    type === 'overlay/navigate' ||\n                    type === 'loader/documents'\n                  ) {\n                    return\n                  }\n\n                  return onEvent(...args)\n                }) satisfies typeof onEvent)\n              : undefined,\n          }\n        }),\n      })\n      destroySource.add(destroy)\n      sendToSource.set(source, send)\n      sources.add(source)\n    },\n  }\n}\n\nfunction createChannelsControllerInternal<\n  ConnectionIds extends string,\n  Sends extends ChannelMsg,\n  Receives extends ChannelMsg,\n>(\n  config: ChannelsControllerOptions<ConnectionIds, Receives>,\n): Omit<ChannelsController<ConnectionIds, Sends>, 'addSource'> {\n  type Channel = ChannelsControllerChannel<ConnectionIds, Receives>\n\n  const target = config.target\n\n  const channels: Channel[] = config.connectTo.map((config) => ({\n    buffer: [],\n    config,\n    id: '',\n    handler: handshakeHandler,\n    status: 'connecting',\n    interval: undefined,\n    heartbeat: undefined,\n  }))\n\n  function startHandshake(channel: Channel) {\n    channel.id = uuid()\n    channel.interval = window.setInterval(() => {\n      sendHandshake(channel, 'handshake/syn', {id: channel.id})\n    }, HANDSHAKE_INTERVAL)\n  }\n\n  function stopHandshake(channel: Channel) {\n    window.clearInterval(channel.interval)\n  }\n\n  function isValidMessageEvent(e: MessageEvent): e is MessageEvent<ProtocolMsg<Receives>> {\n    const {data, origin} = e\n    return (\n      data.domain === 'sanity/channels' &&\n      data.to == config.id &&\n      channels.map((channel) => channel.config.id).includes(data.from) &&\n      data.type !== 'channel/response' &&\n      origin === config.targetOrigin\n    )\n  }\n\n  function handshakeHandler(e: MessageEvent<ProtocolMsg<Receives>>) {\n    const {data} = e\n    if (isHandshakeMessage(data.type)) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel && data.type === 'handshake/syn-ack') {\n        setChannelStatus(channel, 'connected')\n        sendHandshake(channel, 'handshake/ack', {id: channel.id})\n      }\n    }\n  }\n\n  const messageHandler = ((e: MessageEvent<ProtocolMsg<Receives>>) => {\n    const data = e.data as ProtocolMsg<Receives>\n    if (\n      !isHandshakeMessage(data.type) &&\n      channels.find((channel) => channel.id === data.connectionId)\n    ) {\n      const channel = channels.find((channel) => channel.config.id === data.from)\n      if (channel) {\n        const args = [data.type, data.data] as ToArgs<Receives>\n        channel.config.onEvent?.(...args)\n        config.onEvent?.(...args)\n        send(channel, 'channel/response', {responseTo: data.id}, false)\n      }\n    }\n  }) satisfies Channel['handler']\n\n  function handleEvents(e: MessageEvent<ProtocolMsg<Receives>>) {\n    if (isLegacyHandshakeMessage(e)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Visual editing package mismatch detected! Please ensure you are using the latest version of Sanity Studio and any packages listed here:\\nhttps://github.com/sanity-io/visual-editing',\n      )\n      return\n    }\n\n    if (isValidMessageEvent(e)) {\n      const {data} = e\n      channels.find((channel) => channel.config.id === data.from)?.handler(e)\n    }\n  }\n\n  function flush(channel: Channel) {\n    const toFlush = [...channel.buffer]\n    channel.buffer.splice(0, channel.buffer.length)\n    toFlush.forEach(({type, data}) => {\n      send(channel, type, data)\n    })\n  }\n\n  function startHeartbeat(channel: Channel) {\n    stopHeartbeat(channel)\n    if (channel.config.heartbeat) {\n      const heartbeatInverval =\n        typeof channel.config.heartbeat === 'number' ? channel.config.heartbeat : HEARTBEAT_INTERVAL\n      channel.heartbeat = window.setInterval(() => {\n        send(channel, 'channel/heartbeat')\n      }, heartbeatInverval)\n    }\n  }\n\n  function stopHeartbeat(channel: Channel) {\n    if (channel.heartbeat) {\n      window.clearInterval(channel.heartbeat)\n    }\n  }\n\n  function setChannelStatus(channel: Channel, next: ChannelStatus) {\n    channel.status = next\n    channel.config.onStatusUpdate?.(next, channel.config.id)\n    config.onStatusUpdate?.(next, channel.config.id)\n    if (next === 'connecting' || next === 'reconnecting') {\n      channel.handler = handshakeHandler\n      stopHeartbeat(channel)\n      startHandshake(channel)\n    } else if (next === 'connected') {\n      channel.handler = messageHandler\n      stopHandshake(channel)\n      startHeartbeat(channel)\n      flush(channel)\n    } else if (next === 'disconnected') {\n      channel.id = null\n      channel.handler = handshakeHandler\n      stopHandshake(channel)\n      stopHeartbeat(channel)\n    }\n  }\n\n  function sendHandshake<T extends Sends['type']>(\n    channel: Channel,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id: uuid(),\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    try {\n      target?.postMessage(msg, {targetOrigin: '*'})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on '${config.id}'`)\n    }\n  }\n\n  function send<T extends Sends['type']>(\n    channel: Channel,\n    type: T | InternalMsgType,\n    data?: Extract<Sends, {type: T}>['data'],\n    expectResponse = true,\n  ) {\n    const id = uuid()\n\n    // If there is no active channel, push to the buffer\n    if (\n      channel.status === 'connecting' ||\n      channel.status === 'reconnecting' ||\n      channel.status === 'disconnected'\n    ) {\n      channel.buffer.push({type, data})\n      return\n    }\n\n    if (!channel.id) {\n      throw new Error('No channel ID set')\n    }\n\n    const msg = {\n      connectionId: channel.id,\n      data,\n      domain: 'sanity/channels',\n      from: config.id,\n      id,\n      to: channel.config.id,\n      type,\n    } satisfies ProtocolMsg<Sends>\n\n    if (expectResponse) {\n      const maxWait = setTimeout(() => {\n        // The channel may have changed, so only reject if the IDs match\n        if (msg.connectionId === channel.id) {\n          // Cleanup the transaction listener\n          window.removeEventListener('message', transact, false)\n          // Push the message to the buffer\n          if (type !== 'channel/heartbeat') {\n            channel.buffer.push({type, data})\n          }\n          // Try to reconnect\n          setChannelStatus(channel, 'reconnecting')\n          // eslint-disable-next-line no-console\n          console.warn(\n            `Received no response to message '${msg.type}' on client '${config.id}' (ID: '${msg.id}').`,\n          )\n        }\n      }, RESPONSE_TIMEOUT)\n\n      const transact = (e: MessageEvent<ChannelMsg>) => {\n        const {data: eventData} = e\n        if (\n          eventData.type === 'channel/response' &&\n          eventData.data?.['responseTo'] &&\n          eventData.data['responseTo'] === msg.id\n        ) {\n          window.removeEventListener('message', transact, false)\n          clearTimeout(maxWait)\n        }\n      }\n      window.addEventListener('message', transact, false)\n    }\n\n    try {\n      target?.postMessage(msg, {targetOrigin: config.targetOrigin})\n    } catch (e) {\n      throw new Error(`Failed to postMessage '${msg.id}' on client '${config.id}'`)\n    }\n  }\n\n  function disconnect() {\n    channels.forEach((channel) => {\n      if (['disconnected'].includes(channel.status)) return\n      send(channel, 'channel/disconnect', {id: channel.id}, false)\n      setChannelStatus(channel, 'disconnected')\n    })\n  }\n\n  function destroy() {\n    disconnect()\n    window.removeEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      stopHeartbeat(channel)\n      stopHandshake(channel)\n    })\n  }\n\n  function initialise() {\n    window.addEventListener('message', handleEvents, false)\n    channels.forEach((channel) => {\n      setChannelStatus(channel, 'connecting')\n    })\n  }\n\n  initialise()\n\n  function sendPublic<T extends Sends['type']>(\n    id: string | string[] | undefined,\n    type: T,\n    data?: Extract<Sends, {type: T}>['data'],\n  ) {\n    const channelsToSend = id ? (Array.isArray(id) ? [...id] : [id]) : channels\n\n    channelsToSend.forEach((id) => {\n      const channel = channels.find((channel) => channel.config.id === id)\n      if (!channel) throw new Error('Invalid channel ID')\n      send(channel, type, data)\n    })\n  }\n\n  return {\n    destroy,\n    send: sendPublic,\n  }\n}\n","// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(?:0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{15}$|^\\d{2}-\\d{6}-\\d{6}-\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar IP_REGEX = /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$|^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?(?:Z|[+-](?:0\\d|1\\d|2[0-3])(?::?[0-5]\\d)?)$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar MAC_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$|^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(?:0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config2) {\n  store = { ...store, ...config2 };\n}\nfunction getGlobalConfig(config2) {\n  return {\n    lang: config2?.lang ?? store?.lang,\n    message: config2?.message,\n    abortEarly: config2?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly,\n    skipPipe: config2?.skipPipe\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2)\n    store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3)\n    store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4)\n    store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference))\n    store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/_stringify/_stringify.ts\nfunction _stringify(input) {\n  let type = typeof input;\n  if (type === \"object\") {\n    type = (input && Object.getPrototypeOf(input)?.constructor?.name) ?? \"null\";\n  }\n  return type === \"string\" ? `\"${input}\"` : type === \"number\" || type === \"bigint\" || type === \"boolean\" ? `${input}` : type;\n}\n\n// src/utils/_addIssue/_addIssue.ts\nfunction _addIssue(context, label, dataset, config2, other) {\n  const input = other && \"input\" in other ? other.input : dataset.value;\n  const expected = other?.expected ?? context.expects;\n  const received = other?.received ?? _stringify(input);\n  const issue = {\n    kind: context.kind,\n    type: context.type,\n    input,\n    expected,\n    received,\n    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : \"R\"}eceived ${received}`,\n    // @ts-expect-error\n    requirement: context.requirement,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config2.lang,\n    abortEarly: config2.abortEarly,\n    abortPipeEarly: config2.abortPipeEarly,\n    skipPipe: config2.skipPipe\n  };\n  const isSchema = context.kind === \"schema\";\n  const message = (\n    // @ts-expect-error\n    context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang)\n  );\n  if (message) {\n    issue.message = typeof message === \"function\" ? message(issue) : message;\n  }\n  if (isSchema) {\n    dataset.typed = false;\n  }\n  if (dataset.issues) {\n    dataset.issues.push(issue);\n  } else {\n    dataset.issues = [issue];\n  }\n}\n\n// src/utils/_isAllowedObjectKey/_isAllowedObjectKey.ts\nfunction _isAllowedObjectKey(key) {\n  return key !== \"__proto__\" && key !== \"prototype\" && key !== \"constructor\";\n}\n\n// src/utils/_isLuhnAlgo/_isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction _isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/entriesFromList/entriesFromList.ts\nfunction entriesFromList(list, schema) {\n  const entries = {};\n  for (const key of list) {\n    entries[key] = schema;\n  }\n  return entries;\n}\n\n// src/utils/getDotPath/getDotPath.ts\nfunction getDotPath(issue) {\n  if (issue.path) {\n    let key = \"\";\n    for (const item of issue.path) {\n      if (\"key\" in item && (typeof item.key === \"string\" || typeof item.key === \"number\")) {\n        if (key) {\n          key += `.${item.key}`;\n        } else {\n          key += item.key;\n        }\n      } else {\n        return null;\n      }\n    }\n    return key;\n  }\n  return null;\n}\n\n// src/utils/isOfKind/isOfKind.ts\nfunction isOfKind(kind, object2) {\n  return object2.kind === kind;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/isValiError/isValiError.ts\nfunction isValiError(error) {\n  return error instanceof ValiError;\n}\n\n// src/utils/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  /**\n   * The error issues.\n   */\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/actions/bic/bic.ts\nfunction bic(message) {\n  return {\n    kind: \"validation\",\n    type: \"bic\",\n    reference: bic,\n    async: false,\n    expects: null,\n    requirement: BIC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"BIC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"bytes\",\n    reference: bytes,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 !== this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/brand/brand.ts\nfunction brand(name) {\n  return {\n    kind: \"transformation\",\n    type: \"brand\",\n    reference: brand,\n    async: false,\n    name,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/check.ts\nfunction check(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: check,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/checkAsync.ts\nfunction checkAsync(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: checkAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.typed && !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/creditCard/creditCard.ts\nvar CREDIT_CARD_REGEX = /^(?:\\d{14,19}|\\d{4}(?: \\d{3,6}){2,4}|\\d{4}(?:-\\d{3,6}){2,4})$/u;\nvar SANITIZE_REGEX = /[- ]/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11,13}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(?:222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(?:6[27]\\d{14,17}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    kind: \"validation\",\n    type: \"credit_card\",\n    reference: creditCard,\n    async: false,\n    expects: null,\n    requirement(input) {\n      let sanitized;\n      return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks\n      (sanitized = input.replace(SANITIZE_REGEX, \"\")) && // Check if it matches a provider\n      PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && // Check if passes luhn algorithm\n      _isLuhnAlgo(sanitized);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"credit card\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    kind: \"validation\",\n    type: \"cuid2\",\n    reference: cuid2,\n    async: false,\n    expects: null,\n    requirement: CUID2_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Cuid2\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"decimal\",\n    reference: decimal,\n    async: false,\n    expects: null,\n    requirement: DECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"decimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/email/email.ts\nfunction email(message) {\n  return {\n    kind: \"validation\",\n    type: \"email\",\n    reference: email,\n    expects: null,\n    async: false,\n    requirement: EMAIL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"email\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    kind: \"validation\",\n    type: \"emoji\",\n    reference: emoji,\n    async: false,\n    expects: null,\n    requirement: EMOJI_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"emoji\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/empty/empty.ts\nfunction empty(message) {\n  return {\n    kind: \"validation\",\n    type: \"empty\",\n    reference: empty,\n    async: false,\n    expects: \"0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"ends_with\",\n    reference: endsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.endsWith(this.requirement)) {\n        _addIssue(this, \"end\", dataset, config2, {\n          received: `\"${dataset.value.slice(-this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/every/every.ts\nfunction every(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"every\",\n    reference: every,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.every(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"excludes\",\n    reference: excludes,\n    async: false,\n    expects: `!${received}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, { received });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/finite/finite.ts\nfunction finite(message) {\n  return {\n    kind: \"validation\",\n    type: \"finite\",\n    reference: finite,\n    async: false,\n    expects: null,\n    requirement: Number.isFinite,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"finite\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    kind: \"validation\",\n    type: \"hash\",\n    reference: hash,\n    expects: null,\n    async: false,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hash\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"hexadecimal\",\n    reference: hexadecimal,\n    async: false,\n    expects: null,\n    requirement: HEXADECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hexadecimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    kind: \"validation\",\n    type: \"hex_color\",\n    reference: hexColor,\n    async: false,\n    expects: null,\n    requirement: HEX_COLOR_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hex color\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/imei/imei.ts\nfunction imei(message) {\n  return {\n    kind: \"validation\",\n    type: \"imei\",\n    reference: imei,\n    async: false,\n    expects: null,\n    requirement(input) {\n      return IMEI_REGEX.test(input) && _isLuhnAlgo(input);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"IMEI\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"includes\",\n    reference: includes,\n    async: false,\n    expects,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, {\n          received: `!${expects}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/integer/integer.ts\nfunction integer(message) {\n  return {\n    kind: \"validation\",\n    type: \"integer\",\n    reference: integer,\n    async: false,\n    expects: null,\n    requirement: Number.isInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ip/ip.ts\nfunction ip(message) {\n  return {\n    kind: \"validation\",\n    type: \"ip\",\n    reference: ip,\n    async: false,\n    expects: null,\n    requirement: IP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IP\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv4\",\n    reference: ipv4,\n    async: false,\n    expects: null,\n    requirement: IPV4_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv4\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv6\",\n    reference: ipv6,\n    async: false,\n    expects: null,\n    requirement: IPV6_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv6\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date\",\n    reference: isoDate,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date_time\",\n    reference: isoDateTime,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date-time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time\",\n    reference: isoTime,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time_second\",\n    reference: isoTimeSecond,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_SECOND_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time-second\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_timestamp\",\n    reference: isoTimestamp,\n    async: false,\n    expects: null,\n    requirement: ISO_TIMESTAMP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"timestamp\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_week\",\n    reference: isoWeek,\n    async: false,\n    expects: null,\n    requirement: ISO_WEEK_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"week\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/length/length.ts\nfunction length(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"length\",\n    reference: length,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length !== this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac/mac.ts\nfunction mac(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac\",\n    reference: mac,\n    async: false,\n    expects: null,\n    requirement: MAC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac48\",\n    reference: mac48,\n    async: false,\n    expects: null,\n    requirement: MAC48_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"48-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac64\",\n    reference: mac64,\n    async: false,\n    expects: null,\n    requirement: MAC64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"64-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_bytes\",\n    reference: maxBytes,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 > this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_length\",\n    reference: maxLength,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_size\",\n    reference: maxSize,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size > this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_value\",\n    reference: maxValue,\n    async: false,\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value > this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"mime_type\",\n    reference: mimeType,\n    async: false,\n    expects: requirement.map((option) => `\"${option}\"`).join(\" | \") || \"never\",\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.includes(dataset.value.type)) {\n        _addIssue(this, \"MIME type\", dataset, config2, {\n          received: `\"${dataset.value.type}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_bytes\",\n    reference: minBytes,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 < this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_length\",\n    reference: minLength,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length < this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_size\",\n    reference: minSize,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size < this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_value\",\n    reference: minValue,\n    async: false,\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value < this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"multiple_of\",\n    reference: multipleOf,\n    async: false,\n    expects: `%${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value % this.requirement !== 0) {\n        _addIssue(this, \"multiple\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nonEmpty/nonEmpty.ts\nfunction nonEmpty(message) {\n  return {\n    kind: \"validation\",\n    type: \"non_empty\",\n    reference: nonEmpty,\n    async: false,\n    expects: \"!0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: \"0\"\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_bytes\",\n    reference: notBytes,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 === this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_length\",\n    reference: notLength,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_size\",\n    reference: notSize,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size === this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_value\",\n    reference: notValue,\n    async: false,\n    expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/octal/octal.ts\nfunction octal(message) {\n  return {\n    kind: \"validation\",\n    type: \"octal\",\n    reference: octal,\n    async: false,\n    expects: null,\n    requirement: OCTAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"octal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/readonly/readonly.ts\nfunction readonly() {\n  return {\n    kind: \"transformation\",\n    type: \"readonly\",\n    reference: readonly,\n    async: false,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"regex\",\n    reference: regex,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"format\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    kind: \"validation\",\n    type: \"safe_integer\",\n    reference: safeInteger,\n    async: false,\n    expects: null,\n    requirement: Number.isSafeInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"safe integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/size/size.ts\nfunction size(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"size\",\n    reference: size,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size !== this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/some/some.ts\nfunction some(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"some\",\n    reference: some,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.some(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"starts_with\",\n    reference: startsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.startsWith(this.requirement)) {\n        _addIssue(this, \"start\", dataset, config2, {\n          received: `\"${dataset.value.slice(0, this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_lower_case\",\n    reference: toLowerCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toLowerCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_max_value\",\n    reference: toMaxValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_min_value\",\n    reference: toMinValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_upper_case\",\n    reference: toUpperCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toUpperCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transform.ts\nfunction transform(action) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transform,\n    async: false,\n    action,\n    _run(dataset) {\n      dataset.value = action(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transformAsync.ts\nfunction transformAsync(action) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transformAsync,\n    async: true,\n    action,\n    async _run(dataset) {\n      dataset.value = await action(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trim/trim.ts\nfunction trim() {\n  return {\n    kind: \"transformation\",\n    type: \"trim\",\n    reference: trim,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trim();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimEnd/trimEnd.ts\nfunction trimEnd() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_end\",\n    reference: trimEnd,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimEnd();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimStart/trimStart.ts\nfunction trimStart() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_start\",\n    reference: trimStart,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimStart();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    kind: \"validation\",\n    type: \"ulid\",\n    reference: ulid,\n    async: false,\n    expects: null,\n    requirement: ULID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"ULID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/url/url.ts\nfunction url(message) {\n  return {\n    kind: \"validation\",\n    type: \"url\",\n    reference: url,\n    async: false,\n    expects: null,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"URL\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    kind: \"validation\",\n    type: \"uuid\",\n    reference: uuid,\n    async: false,\n    expects: null,\n    requirement: UUID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"UUID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/value/value.ts\nfunction value(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"value\",\n    reference: value,\n    async: false,\n    expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/config/config.ts\nfunction config(schema, config2) {\n  return {\n    ...schema,\n    _run(dataset, config_) {\n      return schema._run(dataset, { ...config_, ...config2 });\n    }\n  };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, dataset, config2) {\n  return typeof schema.fallback === \"function\" ? (\n    // @ts-expect-error\n    schema.fallback(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.fallback\n  );\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _run(dataset, config2) {\n      schema._run(dataset, config2);\n      return dataset.issues ? { typed: true, value: getFallback(this, dataset, config2) } : dataset;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async: true,\n    async _run(dataset, config2) {\n      schema._run(dataset, config2);\n      return dataset.issues ? (\n        // @ts-expect-error\n        { typed: true, value: await getFallback(this, dataset, config2) }\n      ) : dataset;\n    }\n  };\n}\n\n// src/methods/flatten/flatten.ts\nfunction flatten(issues) {\n  const flatErrors = {};\n  for (const issue of issues) {\n    if (issue.path) {\n      const dotPath = getDotPath(issue);\n      if (dotPath) {\n        if (!flatErrors.nested) {\n          flatErrors.nested = {};\n        }\n        if (flatErrors.nested[dotPath]) {\n          flatErrors.nested[dotPath].push(issue.message);\n        } else {\n          flatErrors.nested[dotPath] = [issue.message];\n        }\n      } else {\n        if (flatErrors.other) {\n          flatErrors.other.push(issue.message);\n        } else {\n          flatErrors.other = [issue.message];\n        }\n      }\n    } else {\n      if (flatErrors.root) {\n        flatErrors.root.push(issue.message);\n      } else {\n        flatErrors.root = [issue.message];\n      }\n    }\n  }\n  return flatErrors;\n}\n\n// src/methods/forward/forward.ts\nfunction forward(action, pathKeys) {\n  return {\n    ...action,\n    _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(action, pathKeys) {\n  return {\n    ...action,\n    async: true,\n    async _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      await action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema, dataset, config2) {\n  return typeof schema.default === \"function\" ? (\n    // @ts-expect-error\n    schema.default(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.default\n  );\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getDefaults(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getDefaults);\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getDefaultsAsync));\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getFallbacks(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getFallbacks);\n  }\n  return getFallback(schema);\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getFallbacksAsync));\n  }\n  return getFallback(schema);\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input) {\n  return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any() {\n  return {\n    kind: \"schema\",\n    type: \"any\",\n    reference: any,\n    expects: \"any\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: array,\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.item._run({ typed: false, value: value2 }, config2);\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: arrayAsync,\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          input.map((value2) => this.item._run({ typed: false, value: value2 }, config2))\n        );\n        for (let key = 0; key < itemDatasets.length; key++) {\n          const itemDataset = itemDatasets[key];\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: input[key]\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(message) {\n  return {\n    kind: \"schema\",\n    type: \"bigint\",\n    reference: bigint,\n    expects: \"bigint\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"bigint\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(message) {\n  return {\n    kind: \"schema\",\n    type: \"blob\",\n    reference: blob,\n    expects: \"Blob\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Blob) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(message) {\n  return {\n    kind: \"schema\",\n    type: \"boolean\",\n    reference: boolean,\n    expects: \"boolean\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"boolean\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/custom.ts\nfunction custom(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: custom,\n    expects: \"unknown\",\n    async: false,\n    check: check2,\n    message,\n    _run(dataset, config2) {\n      if (this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/customAsync.ts\nfunction customAsync(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: customAsync,\n    expects: \"unknown\",\n    async: true,\n    check: check2,\n    message,\n    async _run(dataset, config2) {\n      if (await this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(message) {\n  return {\n    kind: \"schema\",\n    type: \"date\",\n    reference: date,\n    expects: \"Date\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Date && !isNaN(dataset.value.getTime())) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const options = Object.entries(enum__).filter(([key]) => isNaN(+key)).map(([, value2]) => value2);\n  return {\n    kind: \"schema\",\n    type: \"enum\",\n    reference: enum_,\n    expects: options.map(_stringify).join(\" | \") || \"never\",\n    async: false,\n    enum: enum__,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, message) {\n  return {\n    kind: \"schema\",\n    type: \"instance\",\n    reference: instance,\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof this.class) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/utils/_merge/_merge.ts\nfunction _merge(value1, value2) {\n  if (typeof value1 === typeof value2) {\n    if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {\n      return { value: value1 };\n    }\n    if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {\n      for (const key in value2) {\n        if (key in value1) {\n          const dataset = _merge(value1[key], value2[key]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[key] = dataset.value;\n        } else {\n          value1[key] = value2[key];\n        }\n      }\n      return { value: value1 };\n    }\n    if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (value1.length === value2.length) {\n        for (let index = 0; index < value1.length; index++) {\n          const dataset = _merge(value1[index], value2[index]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[index] = dataset.value;\n        }\n        return { value: value1 };\n      }\n    }\n  }\n  return { issue: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersect,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        for (const schema of this.options) {\n          const optionDataset = schema._run(\n            { typed: false, value: input },\n            config2\n          );\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersectAsync,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \") || \"never\",\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        const optionDatasets = await Promise.all(\n          this.options.map(\n            (schema) => schema._run({ typed: false, value: input }, config2)\n          )\n        );\n        for (const optionDataset of optionDatasets) {\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazy,\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _run(dataset, config2) {\n      return this.getter(dataset.value)._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazyAsync,\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _run(dataset, config2) {\n      return (await this.getter(dataset.value))._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    kind: \"schema\",\n    type: \"literal\",\n    reference: literal,\n    expects: _stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === this.literal) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObject.ts\nfunction looseObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isAllowedObjectKey(key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObjectAsync.ts\nfunction looseObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isAllowedObjectKey(key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTuple.ts\nfunction looseTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTupleAsync.ts\nfunction looseTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: map,\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input) {\n          const keyDataset = this.key._run(\n            { typed: false, value: inputKey },\n            config2\n          );\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: mapAsync,\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        const datasets = await Promise.all(\n          [...input].map(\n            ([inputKey, inputValue]) => Promise.all([\n              inputKey,\n              inputValue,\n              this.key._run({ typed: false, value: inputKey }, config2),\n              this.value._run({ typed: false, value: inputValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          inputKey,\n          inputValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    kind: \"schema\",\n    type: \"nan\",\n    reference: nan,\n    expects: \"NaN\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (Number.isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    kind: \"schema\",\n    type: \"never\",\n    reference: never,\n    expects: \"never\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      _addIssue(this, \"type\", dataset, config2);\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullable,\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullableAsync,\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullish,\n    expects: \"!null & !undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullishAsync,\n    expects: \"!null & !undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptional,\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptionalAsync,\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    kind: \"schema\",\n    type: \"null\",\n    reference: null_,\n    expects: \"null\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullable,\n    expects: `${wrapped.expects} | null`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullableAsync,\n    expects: `${wrapped.expects} | null`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullish,\n    expects: `${wrapped.expects} | null | undefined`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullishAsync,\n    expects: `${wrapped.expects} | null | undefined`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/number/number.ts\nfunction number(message) {\n  return {\n    kind: \"schema\",\n    type: \"number\",\n    reference: number,\n    expects: \"number\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"number\" && !isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: object,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: objectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRest.ts\nfunction objectWithRest(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRest,\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isAllowedObjectKey(key) && !(key in this.entries)) {\n              const value2 = input[key];\n              const valueDataset = this.rest._run(\n                { typed: false, value: value2 },\n                config2\n              );\n              if (valueDataset.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of valueDataset.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  dataset.issues?.push(issue);\n                }\n                if (!dataset.issues) {\n                  dataset.issues = valueDataset.issues;\n                }\n                if (config2.abortEarly) {\n                  dataset.typed = false;\n                  break;\n                }\n              }\n              if (!valueDataset.typed) {\n                dataset.typed = false;\n              }\n              dataset.value[key] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRestAsync.ts\nfunction objectWithRestAsync(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRestAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal entry\n          Promise.all(\n            Object.entries(this.entries).map(async ([key, schema]) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await schema._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other entries with rest schema\n          Promise.all(\n            Object.entries(input).filter(\n              ([key]) => _isAllowedObjectKey(key) && !(key in this.entries)\n            ).map(\n              async ([key, value2]) => [\n                key,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ]\n            )\n          )\n        ]);\n        for (const [key, value2, valueDataset] of normalDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, valueDataset] of restDatasets) {\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!valueDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optional,\n    expects: `${wrapped.expects} | undefined`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optionalAsync,\n    expects: `${wrapped.expects} | undefined`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"picklist\",\n    reference: picklist,\n    expects: options.map(_stringify).join(\" | \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/record.ts\nfunction record(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: record,\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const entryKey in input) {\n          if (_isAllowedObjectKey(entryKey)) {\n            const entryValue = input[entryKey];\n            const keyDataset = this.key._run(\n              { typed: false, value: entryKey },\n              config2\n            );\n            if (keyDataset.issues) {\n              const pathItem = {\n                type: \"record\",\n                origin: \"key\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of keyDataset.issues) {\n                issue.path = [pathItem];\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = keyDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            const valueDataset = this.value._run(\n              { typed: false, value: entryValue },\n              config2\n            );\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"record\",\n                origin: \"value\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!keyDataset.typed || !valueDataset.typed) {\n              dataset.typed = false;\n            }\n            if (keyDataset.typed) {\n              dataset.value[keyDataset.value] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: recordAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const datasets = await Promise.all(\n          Object.entries(input).filter(([key2]) => _isAllowedObjectKey(key2)).map(\n            ([entryKey, entryValue]) => Promise.all([\n              entryKey,\n              entryValue,\n              this.key._run({ typed: false, value: entryKey }, config2),\n              this.value._run({ typed: false, value: entryValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          entryKey,\n          entryValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"record\",\n              origin: \"key\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of keyDataset.issues) {\n              issue.path = [pathItem];\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"record\",\n              origin: \"value\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (keyDataset.typed) {\n            dataset.value[keyDataset.value] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: set,\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: setAsync,\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        const valueDatasets = await Promise.all(\n          [...input].map(\n            async (inputValue) => [\n              inputValue,\n              await this.value._run(\n                { typed: false, value: inputValue },\n                config2\n              )\n            ]\n          )\n        );\n        for (const [inputValue, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObject.ts\nfunction strictObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObjectAsync.ts\nfunction strictObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTuple.ts\nfunction strictTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key: items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTupleAsync.ts\nfunction strictTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key: items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(message) {\n  return {\n    kind: \"schema\",\n    type: \"string\",\n    reference: string,\n    expects: \"string\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"string\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    kind: \"schema\",\n    type: \"symbol\",\n    reference: symbol,\n    expects: \"symbol\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"symbol\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRest.ts\nfunction tupleWithRest(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRest,\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const itemDataset = this.rest._run({ typed: false, value: value2 }, config2);\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRestAsync.ts\nfunction tupleWithRestAsync(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRestAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal item\n          Promise.all(\n            items.map(async (item, key) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await item._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other items with rest schema\n          Promise.all(\n            input.slice(items.length).map(async (value2, key) => {\n              return [\n                key + items.length,\n                value2,\n                await rest._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          )\n        ]);\n        for (const [key, value2, itemDataset] of normalDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, itemDataset] of restDatasets) {\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"tuple\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    kind: \"schema\",\n    type: \"undefined\",\n    reference: undefined_,\n    expects: \"undefined\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/utils/_subIssues/_subIssues.ts\nfunction _subIssues(datasets) {\n  let issues;\n  if (datasets) {\n    for (const dataset of datasets) {\n      if (issues) {\n        issues.push(...dataset.issues);\n      } else {\n        issues = dataset.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: union,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: unionAsync,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \") || \"never\",\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = await schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown() {\n  return {\n    kind: \"schema\",\n    type: \"unknown\",\n    reference: unknown,\n    expects: \"unknown\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/utils/_discriminators/_discriminators.ts\nfunction _discriminators(key, options, set2 = /* @__PURE__ */ new Set()) {\n  for (const schema of options) {\n    if (schema.type === \"variant\") {\n      _discriminators(key, schema.options, set2);\n    } else {\n      set2.add(schema.entries[key].expects);\n    }\n  }\n  return set2;\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, message) {\n  let expectedDiscriminators;\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variant,\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        const discriminator = input[this.key];\n        if (this.key in input) {\n          let outputDataset;\n          for (const schema of this.options) {\n            if (schema.type === \"variant\" || !schema.entries[this.key]._run(\n              { typed: false, value: discriminator },\n              config2\n            ).issues) {\n              const optionDataset = schema._run(\n                { typed: false, value: input },\n                config2\n              );\n              if (!optionDataset.issues) {\n                return optionDataset;\n              }\n              if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                outputDataset = optionDataset;\n              }\n            }\n          }\n          if (outputDataset) {\n            return outputDataset;\n          }\n        }\n        if (!expectedDiscriminators) {\n          expectedDiscriminators = [..._discriminators(this.key, this.options)].join(\" | \") || \"never\";\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          input: discriminator,\n          expected: expectedDiscriminators,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: discriminator\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, message) {\n  let expectedDiscriminators;\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variantAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        const discriminator = input[this.key];\n        if (this.key in input) {\n          let outputDataset;\n          for (const schema of this.options) {\n            if (schema.type === \"variant\" || !(await schema.entries[this.key]._run(\n              { typed: false, value: discriminator },\n              config2\n            )).issues) {\n              const optionDataset = await schema._run(\n                { typed: false, value: input },\n                config2\n              );\n              if (!optionDataset.issues) {\n                return optionDataset;\n              }\n              if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                outputDataset = optionDataset;\n              }\n            }\n          }\n          if (outputDataset) {\n            return outputDataset;\n          }\n        }\n        if (!expectedDiscriminators) {\n          expectedDiscriminators = [..._discriminators(this.key, this.options)].join(\" | \") || \"never\";\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          input: discriminator,\n          expected: expectedDiscriminators,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: discriminator\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    kind: \"schema\",\n    type: \"void\",\n    reference: void_,\n    expects: \"void\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema, message) {\n  return picklist(Object.keys(schema.entries), message);\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys) {\n  const entries = {\n    ...schema.entries\n  };\n  for (const key of keys) {\n    delete entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parser/parser.ts\nfunction parser(schema, config2) {\n  const func = (input) => parse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/parser/parserAsync.ts\nfunction parserAsync(schema, config2) {\n  const func = (input) => parseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optional(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys) {\n  const entries = {};\n  for (const key of keys) {\n    entries[key] = schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pipe/pipe.ts\nfunction pipe(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    _run(dataset, config2) {\n      for (let index = 0; index < pipe2.length; index++) {\n        dataset = pipe2[index]._run(dataset, config2);\n        const nextAction = pipe2[index + 1];\n        if (config2.skipPipe || dataset.issues && (config2.abortEarly || config2.abortPipeEarly || // TODO: This behavior must be documented!\n        nextAction?.kind === \"schema\" || nextAction?.kind === \"transformation\")) {\n          dataset.typed = false;\n          break;\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/pipe/pipeAsync.ts\nfunction pipeAsync(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    async: true,\n    async _run(dataset, config2) {\n      for (let index = 0; index < pipe2.length; index++) {\n        dataset = await pipe2[index]._run(dataset, config2);\n        const nextAction = pipe2[index + 1];\n        if (config2.skipPipe || dataset.issues && (config2.abortEarly || config2.abortPipeEarly || // TODO: This behavior must be documented!\n        nextAction?.kind === \"schema\" || nextAction?.kind === \"transformation\")) {\n          dataset.typed = false;\n          break;\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParser/safeParser.ts\nfunction safeParser(schema, config2) {\n  const func = (input) => safeParse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/safeParser/safeParserAsync.ts\nfunction safeParserAsync(schema, config2) {\n  const func = (input) => safeParseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\nexport {\n  BIC_REGEX,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  IP_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  MAC_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  _addIssue,\n  _isAllowedObjectKey,\n  _isLuhnAlgo,\n  _stringify,\n  any,\n  array,\n  arrayAsync,\n  bic,\n  bigint,\n  blob,\n  boolean,\n  brand,\n  bytes,\n  check,\n  checkAsync,\n  config,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  decimal,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  email,\n  emoji,\n  empty,\n  endsWith,\n  entriesFromList,\n  enum_,\n  every,\n  excludes,\n  fallback,\n  fallbackAsync,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  getDefault,\n  getDefaults,\n  getDefaultsAsync,\n  getDotPath,\n  getFallback,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  imei,\n  includes,\n  instance,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isOfKind,\n  isOfType,\n  isValiError,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  looseObject,\n  looseObjectAsync,\n  looseTuple,\n  looseTupleAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  never,\n  nonEmpty,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  object,\n  objectAsync,\n  objectWithRest,\n  objectWithRestAsync,\n  octal,\n  omit,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  parser,\n  parserAsync,\n  partial,\n  partialAsync,\n  pick,\n  picklist,\n  pipe,\n  pipeAsync,\n  readonly,\n  record,\n  recordAsync,\n  regex,\n  required,\n  requiredAsync,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  safeParser,\n  safeParserAsync,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  some,\n  startsWith,\n  strictObject,\n  strictObjectAsync,\n  strictTuple,\n  strictTupleAsync,\n  string,\n  symbol,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toUpperCase,\n  transform,\n  transformAsync,\n  trim,\n  trimEnd,\n  trimStart,\n  tuple,\n  tupleAsync,\n  tupleWithRest,\n  tupleWithRestAsync,\n  ulid,\n  undefined_,\n  union,\n  unionAsync,\n  unknown,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  void_\n};\n","import{getPublishedId as t,studioPath as e}from\"@sanity/client/csm\";import{pipe as r,string as o,minLength as s,optional as n,object as a,record as c,unknown as i,is as u,safeParse as p,parse as f}from\"valibot\";function l(t){return\"object\"==typeof t&&null!==t&&!Array.isArray(t)}function d(t){return null!==t&&Array.isArray(t)}function b(t){let e=\"\";for(const r of t)\"string\"!=typeof r?\"number\"!=typeof r?d(r)?(e&&(e+=\":\"),e+=`${r.join(\",\")}}`):r._key&&(e&&(e+=\":\"),e+=`${r._key}`):(e&&(e+=\":\"),e+=`${r}`):(e&&(e+=\".\"),e+=r);return e}const y=/^([A-Za-z]+):([0-9]+)$/,m=/^([A-Za-z]+):([0-9]+),([0-9]+)$/,h=/^([A-Za-z]+):([a-z0-9]+)$/;function k(t){const e=[];for(const r of t.split(\".\")){const t=y.exec(r);if(t){e.push(t[1],Number(t[2]));continue}const o=m.exec(r);if(o){e.push(o[1],[Number(o[2]),Number(o[3])]);continue}const s=h.exec(r);s?e.push(s[1],{_key:s[2]}):e.push(r)}return e}const j=\"drafts.\",w=r(o(),s(1)),A=n(w),U=a({baseUrl:w,dataset:A,id:w,path:w,projectId:A,tool:A,type:A,workspace:A,isDraft:n(o())}),$=a({origin:w,href:w,data:n(c(o(),i()))});function g(t){return u(U,t)}function x(t){return u($,t)}function z(r){const{id:o,path:s,baseUrl:n,tool:a,workspace:c,type:i}=r;return g(r)?[[\"id\",t(o)],[\"type\",i],[\"path\",b(e.fromString(s))],[\"base\",encodeURIComponent(n)],[\"workspace\",c],[\"tool\",a],[\"isDraft\",o.startsWith(j)]].filter((([,t])=>!!t)).map((t=>{const[e,r]=t;return!0===r?e:t.join(\"=\")})).join(\";\"):void 0}function D(t){const r=t.split(\";\").reduce(((t,r)=>{const[o,s]=r.split(\"=\");if(!o||r.includes(\"=\")&&!s)return t;switch(o){case\"id\":t.id=s;break;case\"type\":t.type=s;break;case\"path\":t.path=e.toString(k(s));break;case\"base\":t.baseUrl=decodeURIComponent(s);break;case\"tool\":t.tool=s;break;case\"workspace\":t.workspace=s;break;case\"projectId\":t.projectId=s;break;case\"dataset\":t.dataset=s;break;case\"isDraft\":t.isDraft=\"\"}return t}),{});if(g(r))return r}function I(t){const e=p(U,t);if(e.success)return e.output;const r=p($,t);if(r.success)try{const t=new URL(r.output.href,typeof document>\"u\"?\"https://example.com\":location.origin);return t.searchParams.size>0?f(U,Object.fromEntries(t.searchParams.entries())):r.output}catch(t){return console.error(\"Failed to parse sanity node\",t),r.output}}function N(t){if(\"object\"==typeof t&&null!==t)return I(t);try{return I(JSON.parse(t))}catch{return D(t)}}export{j as D,d as a,g as b,x as c,D as d,z as e,N as f,l as i,b as p,k as u};//# sourceMappingURL=transformSanityNodeData.js.map\n","import{studioPath as t}from\"@sanity/client/csm\";import{e as r}from\"./_chunks-es/transformSanityNodeData.js\";import{p as e,u as n}from\"./_chunks-es/transformSanityNodeData.js\";function o(e){function n(r){return r?\"string\"==typeof r?t.fromString(r):r:[]}function a(e){if(!e.id)throw new Error(\"`id` is required to create a data attribute\");if(!e.type)throw new Error(\"`type` is required to create a data attribute\");if(!e.path||!e.path.length)throw new Error(\"`path` is required to create a data attribute\");const n={baseUrl:e.baseUrl||\"/\",workspace:e.workspace,tool:e.tool,type:e.type,id:e.id,path:\"string\"==typeof e.path?e.path:t.toString(e.path)};return r(n)}const i=t=>a({...e,path:[...n(e.path),...n(t)]});return i.toString=function(){return a(e)},i.combine=function(t){return o({...e,...t})},i.scope=function(t){return o({...e,path:[...n(e.path),...n(t)]})},i}function a(t,r){return`${t}-${\"string\"==typeof r?r:JSON.stringify(r)}`}const i=typeof window<\"u\"&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),s={alt:\"altKey\",ctrl:\"ctrlKey\",mod:i?\"metaKey\":\"ctrlKey\",shift:\"shiftKey\"};function p(t,r){return t.every((t=>s[t]?r[s[t]]:r.key===t.toUpperCase()))}function u(t){return t.key===(i?\"Meta\":\"Ctrl\")}function c(t){return\"Alt\"===t.key}export{o as createDataAttribute,a as getQueryCacheKey,c as isAltKey,p as isHotkey,u as isModKey,e as pathToUrlString,n as urlStringToPath};//# sourceMappingURL=index.js.map\n","export function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(\n  fn: F,\n  timeout: number,\n): F {\n  let timer: ReturnType<typeof setTimeout>\n  return ((...args: Parameters<F>) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(fn, args)\n    }, timeout)\n  }) as F\n}\n","import {createContext, type CSSProperties} from 'react'\n\nimport type {PanelElement, ResizerElement} from './types'\n\nexport const PanelsContext = createContext<{\n  activeResizer: string | null\n  drag: (id: string, event: MouseEvent) => void\n  getPanelStyle: (id: string) => CSSProperties\n  registerElement: (id: string, panel: PanelElement | ResizerElement) => void\n  startDragging: (id: string, event: MouseEvent) => void\n  stopDragging: () => void\n  unregisterElement: (id: string) => void\n} | null>(null)\n\nPanelsContext.displayName = 'PanelsContext'\n","import {type FunctionComponent, type PropsWithChildren, useContext, useLayoutEffect} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\n\ninterface PanelProps extends PropsWithChildren {\n  defaultSize?: number | null\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  order?: number\n}\n\nconst Root = styled.div`\n  overflow: hidden;\n  flex-basis: 0;\n  flex-shrink: 1;\n`\n\nexport const Panel: FunctionComponent<PanelProps> = function ({\n  children,\n  defaultSize = null,\n  id,\n  minWidth,\n  maxWidth,\n  order = 0,\n}) {\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const {getPanelStyle, registerElement, unregisterElement} = context\n\n  const style = getPanelStyle(id)\n\n  useLayoutEffect(() => {\n    registerElement(id, {\n      id,\n      type: 'panel',\n      defaultSize,\n      maxWidth: maxWidth ?? null,\n      minWidth: minWidth ?? 0,\n      order,\n    })\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement])\n\n  return <Root style={style}>{children}</Root>\n}\n","import {useMemo} from 'react'\n\nimport {debounce} from '../lib/debounce'\nimport type {PanelElement} from './types'\n\nconst itemKey = 'presentation/panels'\n\ntype StoredPanelsState = Record<string, number[]>\n\nconst getStoredItem = () => {\n  // @todo Validate\n  return JSON.parse(localStorage.getItem(itemKey) || '{}') as StoredPanelsState\n}\nconst setStoredItem = (data: StoredPanelsState) => {\n  localStorage.setItem(itemKey, JSON.stringify(data))\n}\n\nconst getKeyForPanels = (panels: PanelElement[]) => {\n  return panels.map((panel) => [panel.id, panel.order].join(':')).join(',')\n}\n\nexport function usePanelsStorage(): {\n  get: (panels: PanelElement[]) => number[] | undefined\n  set: (panels: PanelElement[], widths: number[]) => void\n  setDebounced: (panels: PanelElement[], widths: number[]) => void\n} {\n  return useMemo(() => {\n    const get = (panels: PanelElement[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      return Array.isArray(stored[key]) && stored[key].some((val) => val === null)\n        ? undefined\n        : stored[key]\n    }\n\n    const set = (panels: PanelElement[], widths: number[]) => {\n      const stored = getStoredItem()\n      const key = getKeyForPanels(panels)\n      const data = {\n        ...stored,\n        [key]: widths,\n      }\n      setStoredItem(data)\n    }\n\n    const setDebounced = debounce(set, 100)\n    return {\n      get,\n      set,\n      setDebounced,\n    }\n  }, [])\n}\n","import type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\n\nfunction getNextWidth(panel: PanelElement, nextWidth: number, containerWidth: number) {\n  const {maxWidth: maxWidthPx, minWidth: minWidthPx} = panel\n  const maxWidth = maxWidthPx == null ? 100 : (maxWidthPx / containerWidth) * 100\n  const minWidth = (minWidthPx / containerWidth) * 100\n  return Math.min(maxWidth, Math.max(minWidth, nextWidth))\n}\n\nexport function getNextWidths(\n  delta: number,\n  containerWidth: number,\n  panelBefore: PanelElement,\n  panelAfter: PanelElement,\n  panelsState: PanelsState,\n  initialDragState: InitialDragState,\n): number[] {\n  const {panels, widths: prevWidths} = panelsState\n  const {widths: initialWidths} = initialDragState\n\n  const widths = initialWidths || prevWidths\n  const nextWidths = [...widths]\n\n  {\n    const pivotPanel = delta < 0 ? panelAfter : panelBefore\n    const index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n    const width = widths[index]\n    const nextWidth = getNextWidth(pivotPanel, width + Math.abs(delta), containerWidth)\n    if (width === nextWidth) {\n      return widths\n    } else {\n      delta = delta < 0 ? width - nextWidth : nextWidth - width\n    }\n  }\n\n  let deltaApplied = 0\n  let pivotPanel = delta < 0 ? panelBefore : panelAfter\n  let index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const panel = panels[index]\n    const width = widths[index]\n\n    const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied)\n\n    const nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth)\n\n    if (width !== nextWidth) {\n      deltaApplied += width - nextWidth\n      nextWidths[index] = nextWidth\n\n      if (\n        deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), undefined, {\n          numeric: true,\n        }) >= 0\n      ) {\n        break\n      }\n    }\n\n    if (delta < 0) {\n      if (--index < 0) {\n        break\n      }\n    } else {\n      if (++index >= panels.length) {\n        break\n      }\n    }\n  }\n\n  if (deltaApplied === 0) {\n    return widths\n  }\n\n  pivotPanel = delta < 0 ? panelAfter : panelBefore\n  index = panels.findIndex((panel) => panel.id === pivotPanel.id)\n  nextWidths[index] = widths[index] + deltaApplied\n\n  return nextWidths\n}\n\nexport function getPanelWidth(panels: PanelElement[], id: string, widths: number[]): string {\n  if (panels.length === 1) return '100'\n\n  const index = panels.findIndex((panel) => panel.id === id)\n  const width = widths[index]\n\n  if (width == null) return '0'\n\n  return width.toPrecision(10)\n}\n\nexport function getOffset(\n  event: MouseEvent,\n  handleElement: HTMLDivElement,\n  initialOffset: number = 0,\n  initialHandleElementRect: DOMRect | null = null,\n): number {\n  const pointerOffset = event.clientX\n\n  const rect = initialHandleElementRect || handleElement.getBoundingClientRect()\n  const elementOffset = rect.left\n\n  return pointerOffset - elementOffset - initialOffset\n}\n\nexport function isPanel(element: PanelElement | ResizerElement): element is PanelElement {\n  return element.type === 'panel'\n}\n\nexport function isResizer(element: PanelElement | ResizerElement): element is ResizerElement {\n  return element.type === 'resizer'\n}\n\nexport function getSortedElements(elements: ElementMap): Array<PanelElement | ResizerElement> {\n  return Array.from(elements.values()).sort(({order: a}, {order: b}) => {\n    if (a == null && b == null) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n    return a - b\n  })\n}\n\nexport function validateWidths(\n  panels: PanelElement[],\n  widthsToValidate: number[],\n  containerWidth: number,\n): number[] {\n  // Clamp widths proportionally to total 100\n  const total = widthsToValidate.reduce((total, width) => total + width, 0)\n  const widths = [...widthsToValidate].map((width) => (width / total) * 100)\n\n  let remainingWidth = 0\n\n  for (let index = 0; index < panels.length; index++) {\n    const panel = panels[index]\n    const width = widths[index]\n    const nextWidth = getNextWidth(panel, width, containerWidth)\n    if (width != nextWidth) {\n      remainingWidth += width - nextWidth\n      widths[index] = nextWidth\n    }\n  }\n\n  if (remainingWidth.toFixed(3) !== '0.000') {\n    for (let index = 0; index < panels.length; index++) {\n      const panel = panels[index]\n\n      let {maxWidth, minWidth} = panel\n\n      minWidth = (minWidth / containerWidth) * 100\n      if (maxWidth != null) {\n        maxWidth = (maxWidth / containerWidth) * 100\n      }\n\n      const width = Math.min(\n        maxWidth != null ? maxWidth : 100,\n        Math.max(minWidth, widths[index] + remainingWidth),\n      )\n\n      if (width !== widths[index]) {\n        remainingWidth -= width - widths[index]\n        widths[index] = width\n\n        if (Math.abs(remainingWidth).toFixed(3) === '0.000') {\n          break\n        }\n      }\n    }\n  }\n\n  return widths\n}\n\nexport function getDefaultWidths(panels: PanelElement[]): number[] {\n  let panelsWithoutWidth = panels.length\n  let remainingWidthTotal = 100\n\n  const widthsWithNulls = panels.map((panel) => {\n    if (panel.defaultSize) {\n      remainingWidthTotal = remainingWidthTotal - panel.defaultSize\n      panelsWithoutWidth = panelsWithoutWidth - 1\n      return panel.defaultSize\n    }\n    return null\n  })\n\n  const defaultWidth = remainingWidthTotal / panelsWithoutWidth\n  const widths = widthsWithNulls.map((width) => {\n    if (width === null) return defaultWidth\n    return width\n  })\n\n  return widths\n}\n","// Slightly modified version of react-resizable-panels\n// https://github.com/bvaughn/react-resizable-panels/tree/main/packages/react-resizable-panels\n\nimport {\n  type CSSProperties,\n  type FunctionComponent,\n  type PropsWithChildren,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport type {ElementMap, InitialDragState, PanelElement, PanelsState, ResizerElement} from './types'\nimport {usePanelsStorage} from './usePanelsStorage'\nimport {\n  getDefaultWidths,\n  getNextWidths,\n  getOffset,\n  getPanelWidth,\n  getSortedElements,\n  isPanel,\n  isResizer,\n  validateWidths,\n} from './util'\n\nconst PanelsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  overflow: hidden;\n  width: 100%;\n`\n\nexport const Panels: FunctionComponent<PropsWithChildren> = function ({children}) {\n  const panelsEl = useRef<HTMLDivElement | null>(null)\n\n  const [elements, setElements] = useState<ElementMap>(new Map())\n\n  const panels = useMemo(() => getSortedElements(elements).filter(isPanel), [elements])\n\n  const [widths, setWidths] = useState<number[]>([])\n  const [activeResizer, setActiveResizer] = useState<string | null>(null)\n\n  const panelsRef = useRef<PanelsState>({\n    elements,\n    panels,\n    widths,\n  })\n\n  const getPanelStyle = useCallback(\n    (id: string): CSSProperties => {\n      return {\n        flexGrow: getPanelWidth(panels, id, widths),\n        pointerEvents: activeResizer === null ? undefined : 'none',\n      }\n    },\n    [activeResizer, panels, widths],\n  )\n\n  const registerElement = useCallback((id: string, data: PanelElement | ResizerElement) => {\n    setElements((prev) => {\n      if (prev.has(id)) return prev\n      const next = new Map(prev)\n      next.set(id, data)\n      return next\n    })\n  }, [])\n  const unregisterElement = useCallback((id: string) => {\n    setElements((prev) => {\n      if (!prev.has(id)) return prev\n      const next = new Map(prev)\n      next.delete(id)\n      return next\n    })\n  }, [])\n\n  const dragRef = useRef<InitialDragState>({\n    containerWidth: window.innerWidth,\n    dragOffset: 0,\n    panelAfter: null,\n    panelBefore: null,\n    resizerIndex: -1,\n    resizerRect: null,\n    startX: 0,\n    widths: [],\n  })\n\n  const startDragging = useCallback(\n    (id: string, event: MouseEvent) => {\n      const elementsArr = getSortedElements(elements)\n      const index = elementsArr.findIndex((el) => el.id === id)\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      dragRef.current = {\n        resizerIndex: index,\n        panelBefore: elementsArr.reduce(\n          (acc, el, i) => (isPanel(el) && i < index ? el : acc),\n          null as PanelElement | null,\n        ),\n        panelAfter: elementsArr.reduce(\n          (acc, el, i) => (acc === null && isPanel(el) && i > index ? el : acc),\n          null as PanelElement | null,\n        ),\n        containerWidth: window.innerWidth,\n        startX: event.pageX,\n        dragOffset: getOffset(event, resizeElement),\n        resizerRect: resizeElement.getBoundingClientRect(),\n        widths: panelsRef.current.widths,\n      }\n\n      setActiveResizer(id)\n    },\n    [elements],\n  )\n\n  const stopDragging = useCallback(() => {\n    setActiveResizer(null)\n  }, [])\n\n  const drag = useCallback(\n    (id: string, event: MouseEvent) => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      const {containerWidth, dragOffset, panelBefore, panelAfter, resizerRect} = dragRef.current\n\n      if (panelBefore == null || panelAfter == null) {\n        return\n      }\n\n      const resizer = elements.get(id)\n      if (!resizer || !isResizer(resizer)) return\n      const resizeElement = resizer.el.current\n      if (!resizeElement) return\n\n      const offset = getOffset(event, resizeElement, dragOffset, resizerRect)\n\n      if (offset === 0) {\n        return\n      }\n\n      const {widths: prevWidths} = panelsRef.current\n      const rect = panelsEl.current!.getBoundingClientRect()\n      const delta = (offset / rect.width) * 100\n\n      const nextWidths = getNextWidths(\n        delta,\n        containerWidth,\n        panelBefore,\n        panelAfter,\n        panelsRef.current,\n        dragRef.current,\n      )\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    },\n    [elements],\n  )\n\n  // For setting the panels state\n  useLayoutEffect(() => {\n    panelsRef.current.elements = elements\n    panelsRef.current.panels = panels\n    panelsRef.current.widths = widths\n  }, [elements, panels, widths])\n\n  const storage = usePanelsStorage()\n\n  // For setting default sizing when panels are updated\n  useLayoutEffect(() => {\n    const {widths} = panelsRef.current\n\n    if (widths.length === panels.length) {\n      return\n    }\n\n    const storedWidths = storage.get(panels)\n\n    if (storedWidths) {\n      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth)\n      setWidths(validatedStoredWidths)\n      return\n    }\n\n    const defaultWidths = getDefaultWidths(panels)\n    setWidths(defaultWidths)\n  }, [storage, panels])\n\n  // For storing current widths in localStorage\n  useEffect(() => {\n    if (!widths.length) return\n    storage.setDebounced(panels, widths)\n  }, [storage, panels, widths])\n\n  useLayoutEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      const {panels, widths: prevWidths} = panelsRef.current\n\n      const nextWidths = validateWidths(panels, prevWidths, window.innerWidth)\n\n      const widthsChanged = prevWidths.some((prevWidth, i) => prevWidth !== nextWidths[i])\n      if (widthsChanged) {\n        setWidths(nextWidths)\n      }\n    })\n\n    resizeObserver.observe(panelsEl.current!)\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  const context = useMemo(\n    () => ({\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    }),\n    [\n      activeResizer,\n      drag,\n      getPanelStyle,\n      registerElement,\n      startDragging,\n      stopDragging,\n      unregisterElement,\n    ],\n  )\n\n  return (\n    <PanelsContext.Provider value={context}>\n      <PanelsWrapper ref={panelsEl}>{children}</PanelsWrapper>\n    </PanelsContext.Provider>\n  )\n}\n","import {Box, Button, Card, type CardProps, Container, Flex, Inline, Stack, Text} from '@sanity/ui'\nimport type {ReactElement, ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\n\nexport function ErrorCard(\n  props: {\n    children?: ReactNode\n    message: string\n    onRetry?: () => void\n    onContinueAnyway?: () => void\n  } & CardProps,\n): ReactElement {\n  const {children, message, onRetry, onContinueAnyway, ...restProps} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const retryButton = (\n    <Button fontSize={1} mode=\"ghost\" onClick={onRetry} text={t('error-card.retry-button.text')} />\n  )\n  const continueAnywayButton = (\n    <Button\n      fontSize={1}\n      mode=\"ghost\"\n      tone=\"critical\"\n      onClick={onContinueAnyway}\n      text={t('error-card.continue-button.text')}\n    />\n  )\n\n  return (\n    <Card height=\"fill\" {...restProps}>\n      <Flex align=\"center\" height=\"fill\" justify=\"center\">\n        <Container padding={4} sizing=\"border\" width={0}>\n          <Stack space={4}>\n            <Stack space={3}>\n              <Text size={1} weight=\"semibold\">\n                {t('error-card.title')}\n              </Text>\n              <Text muted size={1}>\n                {message}\n              </Text>\n            </Stack>\n\n            {children}\n\n            {onRetry && onContinueAnyway ? (\n              <Inline space={2}>\n                {retryButton}\n                {continueAnywayButton}\n              </Inline>\n            ) : onRetry ? (\n              <Box>{retryButton}</Box>\n            ) : onContinueAnyway ? (\n              <Box>{continueAnywayButton}</Box>\n            ) : null}\n          </Stack>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","/* eslint-disable no-console */\n\nimport {forwardRef, type PropsWithChildren, type ReactElement, useCallback, useMemo} from 'react'\nimport {StateLink, useRouter} from 'sanity/router'\n\nimport {\n  type BackLinkProps,\n  getPublishedId,\n  PaneRouterContext,\n  type PaneRouterContextValue,\n  type ReferenceChildLinkProps,\n  useUnique,\n} from '../internals'\nimport type {\n  PresentationParams,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from '../types'\n\nfunction encodeQueryString(params: Record<string, unknown> = {}): string {\n  const parts = Object.entries(params)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')\n\n  return parts.length ? `?${parts}` : ''\n}\n\nfunction resolveQueryStringFromParams(nextParams: Record<string, string | undefined>) {\n  const allowed = [\n    'comment',\n    'inspect',\n    'instruction',\n    'pathKey',\n    'rev',\n    'since',\n    'template',\n    'prefersLatestPublished',\n    'view',\n  ] satisfies Array<keyof PresentationParams> as string[]\n\n  const safeNextParams = Object.entries(nextParams)\n    .filter(([key]) => allowed.includes(key))\n    .reduce((obj, [key, value]) => {\n      if (value == undefined) return obj\n      return {...obj, [key]: value}\n    }, {})\n\n  return encodeQueryString(safeNextParams)\n}\n\nconst BackLink = forwardRef(function BackLink(\n  props: BackLinkProps & {searchParams: PresentationSearchParams},\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {searchParams, ...restProps} = props\n  return (\n    <StateLink\n      {...restProps}\n      ref={ref}\n      state={{\n        type: undefined,\n        _searchParams: Object.entries(searchParams),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nconst ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  props: ReferenceChildLinkProps & {searchParams: PresentationSearchParams},\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {\n    documentId,\n    documentType,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    parentRefPath,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    template,\n    searchParams,\n    ...restProps\n  } = props\n\n  return (\n    <StateLink\n      {...restProps}\n      ref={ref}\n      state={{\n        id: documentId,\n        type: documentType,\n        _searchParams: Object.entries({\n          ...searchParams,\n          prefersLatestPublished: searchParams.perspective === 'published' ? 'true' : undefined,\n        }),\n      }}\n      title={undefined}\n    />\n  )\n})\n\nexport function PresentationPaneRouterProvider(\n  props: PropsWithChildren<{\n    onStructureParams: (params: StructureDocumentPaneParams) => void\n    refs?: {_id: string; _type: string}[]\n    searchParams: PresentationSearchParams\n    structureParams: StructureDocumentPaneParams\n  }>,\n): ReactElement {\n  const {children, onStructureParams, structureParams, searchParams, refs} = props\n\n  const {state: routerState, resolvePathFromState} = useRouter()\n\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const path = resolvePathFromState(routerState)\n      const qs = resolveQueryStringFromParams({\n        ...routerSearchParams,\n        ...nextParams,\n      })\n      return `${path}${qs}`\n    },\n    [resolvePathFromState, routerSearchParams, routerState],\n  )\n\n  const context: PaneRouterContextValue = useMemo(() => {\n    return {\n      index: 0,\n      groupIndex: 0,\n      siblingIndex: 0,\n      payload: {},\n      params: structureParams as any,\n      hasGroupSiblings: false,\n      groupLength: 1,\n      routerPanesState: [],\n      ChildLink: (childLinkProps) => {\n        const {childId, ...restProps} = childLinkProps\n        const ref = refs?.find((r) => r._id === childId || getPublishedId(r._id) === childId)\n        if (ref) {\n          return (\n            <StateLink\n              {...restProps}\n              state={{\n                id: childId,\n                type: ref._type,\n                _searchParams: Object.entries({\n                  ...searchParams,\n                  prefersLatestPublished:\n                    searchParams?.perspective === 'published' ? 'true' : undefined,\n                }),\n              }}\n            />\n          )\n        }\n\n        return <div {...restProps} />\n      },\n      BackLink: (backLinkProps) => <BackLink {...backLinkProps} searchParams={searchParams} />,\n      ReferenceChildLink: (childLinkProps) => (\n        <ReferenceChildLink {...childLinkProps} searchParams={searchParams} />\n      ),\n      ParameterizedLink: () => <>ParameterizedLink</>,\n      closeCurrentAndAfter: () => {\n        console.warn('closeCurrentAndAfter')\n      },\n      handleEditReference: (options) => {\n        console.warn('handleEditReference', options)\n      },\n      replaceCurrent: (pane) => {\n        console.warn('replaceCurrent', pane)\n      },\n      closeCurrent: () => {\n        console.warn('closeCurrent')\n      },\n      duplicateCurrent: (pane) => {\n        console.warn('duplicateCurrent', pane)\n      },\n      setView: (viewId) => {\n        console.warn('setView', viewId)\n      },\n      setParams: (nextParams) => {\n        // eslint-disable-next-line no-warning-comments\n        // @todo set inspect param to undefined manually as param is missing from object when closing inspector\n        onStructureParams({\n          ...nextParams,\n          inspect: nextParams['inspect'] ?? undefined,\n        } as StructureDocumentPaneParams)\n      },\n      setPayload: (payload) => {\n        console.warn('setPayload', payload)\n      },\n      navigateIntent: (intentName, intentParams, options) => {\n        console.warn('navigateIntent', intentName, intentParams, options)\n      },\n      createPathWithParams,\n    }\n  }, [createPathWithParams, onStructureParams, refs, searchParams, structureParams])\n\n  return <PaneRouterContext.Provider value={context}>{children}</PaneRouterContext.Provider>\n}\n","import {Card, Code, ErrorBoundary, Flex, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  DocumentListPane as StructureDocumentListPane,\n  getPublishedId,\n  PaneLayout,\n  type PaneNode,\n  StructureToolProvider,\n} from '../internals'\nimport type {\n  MainDocumentState,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst RootLayout = styled(PaneLayout)`\n  height: 100%;\n`\n\nconst Root = styled(Flex)`\n  & > div {\n    min-width: none !important;\n    max-width: none !important;\n  }\n`\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentListPane(props: {\n  mainDocumentState?: MainDocumentState\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  searchParams: PresentationSearchParams\n  refs: {_id: string; _type: string}[]\n}): ReactElement {\n  const {mainDocumentState, onStructureParams, searchParams, refs} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const ids = useMemo(\n    () =>\n      refs\n        .filter((r) => getPublishedId(r._id) !== mainDocumentState?.document?._id)\n        .map((r) => r._id),\n    [mainDocumentState, refs],\n  )\n\n  const pane: Extract<PaneNode, {type: 'documentList'}> = useMemo(\n    () => ({\n      id: '$root',\n      options: {\n        filter: '_id in $ids',\n        params: {ids},\n        // defaultOrdering: [{field: '_updatedAt', direction: 'desc'}],\n      },\n      schemaTypeName: '',\n      title: t('document-list-pane.document-list.title'),\n      type: 'documentList',\n    }),\n    [ids, t],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  const [structureParams] = useState(() => ({}))\n\n  // Reset error state when `refs` value schanges\n  useEffect(() => setErrorParams(null), [refs])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-list-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <RootLayout>\n        <StructureToolProvider>\n          <PresentationPaneRouterProvider\n            onStructureParams={onStructureParams}\n            structureParams={structureParams}\n            searchParams={searchParams}\n            refs={refs}\n          >\n            <Root direction=\"column\" flex={1}>\n              <StructureDocumentListPane index={0} itemId=\"$root\" pane={pane} paneKey=\"$root\" />\n            </Root>\n          </PresentationPaneRouterProvider>\n        </StructureToolProvider>\n      </RootLayout>\n    </ErrorBoundary>\n  )\n}\n","import {Card, Code, ErrorBoundary, Label, Stack} from '@sanity/ui'\nimport {type ErrorInfo, type ReactElement, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type Path, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  decodeJsonParams,\n  DocumentPane as StructureDocumentPane,\n  type DocumentPaneNode,\n  PaneLayout,\n} from '../internals'\nimport type {PresentationSearchParams, StructureDocumentPaneParams} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {PresentationPaneRouterProvider} from './PresentationPaneRouterProvider'\n\nconst WrappedCode = styled(Code)`\n  white-space: pre-wrap;\n`\n\nexport function DocumentPane(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  structureParams: StructureDocumentPaneParams\n  searchParams: PresentationSearchParams\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams} =\n    props\n  const {template, templateParams} = structureParams\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {devMode} = usePresentationTool()\n\n  const paneDocumentNode: DocumentPaneNode = useMemo(\n    () => ({\n      id: documentId,\n      options: {\n        id: documentId,\n        type: documentType,\n        template,\n        templateParameters: decodeJsonParams(templateParams),\n      },\n      title: '',\n      type: 'document',\n    }),\n    [documentId, documentType, template, templateParams],\n  )\n\n  const [errorParams, setErrorParams] = useState<{\n    info: ErrorInfo\n    error: Error\n  } | null>(null)\n\n  const handleRetry = useCallback(() => setErrorParams(null), [])\n\n  // Reset error state when parameters change\n  useEffect(() => {\n    setErrorParams(null)\n  }, [documentId, documentType, structureParams])\n\n  if (errorParams) {\n    return (\n      <ErrorCard flex={1} message={t('document-pane.error.text')} onRetry={handleRetry}>\n        {devMode && (\n          // show runtime error message in dev mode\n          <Card overflow=\"auto\" padding={3} radius={2} tone=\"critical\">\n            <Stack space={3}>\n              <Label muted size={0}>\n                {t('presentation-error.label')}\n              </Label>\n              <WrappedCode size={1}>{errorParams.error.message}</WrappedCode>\n            </Stack>\n          </Card>\n        )}\n      </ErrorCard>\n    )\n  }\n\n  return (\n    <ErrorBoundary onCatch={setErrorParams}>\n      <PaneLayout style={{height: '100%'}}>\n        <PresentationPaneRouterProvider\n          searchParams={searchParams}\n          onStructureParams={onStructureParams}\n          structureParams={structureParams}\n        >\n          <StructureDocumentPane\n            paneKey=\"document\"\n            index={1}\n            itemId=\"document\"\n            pane={paneDocumentNode}\n            onFocusPath={onFocusPath}\n          />\n        </PresentationPaneRouterProvider>\n      </PaneLayout>\n    </ErrorBoundary>\n  )\n}\n","import {type ReactElement} from 'react'\nimport {type Path} from 'sanity'\n\nimport {StructureToolProvider} from '../internals'\nimport type {PresentationSearchParams, StructureDocumentPaneParams} from '../types'\nimport {DocumentPane} from './DocumentPane'\n\nexport function DocumentPanel(props: {\n  documentId: string\n  documentType: string\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  searchParams: PresentationSearchParams\n  structureParams: StructureDocumentPaneParams\n}): ReactElement {\n  const {documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams} =\n    props\n  return (\n    <StructureToolProvider>\n      <DocumentPane\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        searchParams={searchParams}\n        structureParams={structureParams}\n      />\n    </StructureToolProvider>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactElement, useCallback, useMemo} from 'react'\nimport {StateLink} from 'sanity/router'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  getPreviewValueWithFallback,\n  type Path,\n  PreviewCard,\n  SanityDefaultPreview,\n  type SanityDocument,\n  Translate,\n  useSchema,\n  useTranslation,\n} from '../internals'\nimport type {\n  MainDocumentState,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from '../types'\nimport {DocumentListPane} from './DocumentListPane'\nimport {DocumentPanel} from './DocumentPanel'\nimport usePreviewState from './usePreviewState'\n\nexport function ContentEditor(props: {\n  documentId?: string\n  documentType?: string\n  mainDocumentState?: MainDocumentState\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  refs: {_id: string; _type: string}[]\n  structureParams: StructureDocumentPaneParams\n  searchParams: PresentationSearchParams\n}): ReactElement {\n  const {\n    documentId,\n    documentType,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    refs,\n    searchParams,\n    structureParams,\n  } = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const schema = useSchema()\n\n  const MainDocumentLink = useCallback(\n    (props: HTMLProps<HTMLAnchorElement>) => {\n      return (\n        <StateLink\n          {...props}\n          state={{\n            id: mainDocumentState!.document!._id,\n            type: mainDocumentState!.document!._type,\n            _searchParams: Object.entries({\n              ...searchParams,\n              prefersLatestPublished:\n                searchParams?.perspective === 'published' ? 'true' : undefined,\n            }),\n          }}\n        />\n      )\n    },\n    [mainDocumentState, searchParams],\n  )\n\n  const schemaType = useMemo(\n    () => schema.get(mainDocumentState?.document?._type || 'shoe')!,\n    [mainDocumentState, schema],\n  )\n\n  const previewState = usePreviewState(mainDocumentState?.document?._id || '', schemaType)\n\n  const preview = useMemo(() => {\n    if (!mainDocumentState?.document) return null\n\n    return (\n      <SanityDefaultPreview\n        {...getPreviewValueWithFallback({\n          value: mainDocumentState!.document! as SanityDocument,\n          published: previewState.published,\n          draft: previewState.draft,\n        })}\n        schemaType={schemaType}\n        status={\n          <Card padding={1} radius={2} shadow={1}>\n            <Text muted size={0} weight=\"medium\">\n              {t('main-document.label')}\n            </Text>\n          </Card>\n        }\n      />\n    )\n  }, [mainDocumentState, schemaType, t, previewState])\n\n  if (documentId && documentType) {\n    return (\n      <DocumentPanel\n        documentId={documentId}\n        documentType={documentType}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        searchParams={searchParams}\n        structureParams={structureParams}\n      />\n    )\n  }\n\n  return (\n    <Flex direction=\"column\" flex={1} height=\"fill\">\n      {mainDocumentState && (\n        <Card padding={3} tone={mainDocumentState.document ? 'inherit' : 'caution'}>\n          {mainDocumentState.document ? (\n            <PreviewCard\n              __unstable_focusRing\n              as={MainDocumentLink as any}\n              data-as=\"a\"\n              radius={2}\n              sizing=\"border\"\n              tone=\"inherit\"\n            >\n              {preview}\n            </PreviewCard>\n          ) : (\n            <Card padding={2} radius={2} tone=\"inherit\">\n              <Flex gap={3}>\n                <Box flex=\"none\">\n                  <Text size={1}>\n                    <WarningOutlineIcon />\n                  </Text>\n                </Box>\n                <Box flex={1}>\n                  <Text size={1}>\n                    <Translate\n                      t={t}\n                      i18nKey=\"main-document.missing.text\"\n                      components={{Code: 'code'}}\n                      values={{path: mainDocumentState.path}}\n                    />\n                  </Text>\n                </Box>\n              </Flex>\n            </Card>\n          )}\n        </Card>\n      )}\n\n      <DocumentListPane\n        mainDocumentState={mainDocumentState}\n        onStructureParams={onStructureParams}\n        searchParams={searchParams}\n        refs={refs}\n      />\n    </Flex>\n  )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {useEffect, useState} from 'react'\n\nimport {\n  getPreviewStateObservable,\n  type PreviewValue,\n  type SanityDocument,\n  useDocumentPreviewStore,\n} from '../internals'\n\ninterface PreviewState {\n  isLoading?: boolean\n  draft?: PreviewValue | Partial<SanityDocument> | null\n  published?: PreviewValue | Partial<SanityDocument> | null\n}\n\nexport default function usePreviewState(documentId: string, schemaType?: SchemaType): PreviewState {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const [preview, setPreview] = useState<PreviewState>({})\n\n  useEffect(() => {\n    if (!schemaType) {\n      return undefined\n    }\n    const subscription = getPreviewStateObservable(\n      documentPreviewStore,\n      schemaType,\n      documentId,\n      '',\n    ).subscribe((state) => {\n      setPreview(state)\n    })\n\n    return () => {\n      subscription?.unsubscribe()\n    }\n  }, [documentPreviewStore, schemaType, documentId])\n\n  return preview\n}\n","import {\n  type FunctionComponent,\n  type MouseEvent as ReactMouseEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from 'react'\nimport {styled} from 'styled-components'\n\nimport {PanelsContext} from './PanelsContext'\nimport {usePanelId} from './usePanelId'\n\nconst Resizer = styled.div`\n  position: relative;\n`\nconst ResizerInner = styled.div<{\n  $disabled: boolean\n}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -5px;\n  width: 9px;\n  z-index: 10;\n  cursor: ${({$disabled}) => ($disabled ? 'auto' : 'ew-resize')};\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  ${({$disabled}) =>\n    !$disabled &&\n    `\n    /* Hover effect */\n    & > span:nth-child(2) {\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    @media (hover: hover) {\n      &:hover > span:nth-child(2) {\n        opacity: 0.2;\n      }\n    }\n  `}\n`\n\nexport const PanelResizer: FunctionComponent<{\n  id?: string\n  order: number\n  disabled?: boolean\n}> = function ({id: propId, order, disabled = false}) {\n  const el = useRef<HTMLDivElement>(null)\n\n  const context = useContext(PanelsContext)\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const id = usePanelId(propId)\n\n  const {activeResizer, drag, startDragging, stopDragging, registerElement, unregisterElement} =\n    context\n\n  const isDragging = activeResizer === id\n\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`)\n  }\n\n  const onMouseDown = useCallback(\n    (event: ReactMouseEvent) => {\n      startDragging(id, event.nativeEvent)\n    },\n    [id, startDragging],\n  )\n\n  const onDrag = useCallback(\n    (e: MouseEvent) => {\n      drag(id, e)\n    },\n    [id, drag],\n  )\n\n  const onDragStop = useCallback(() => {\n    el.current!.blur()\n    stopDragging()\n  }, [stopDragging])\n\n  useEffect(() => {\n    if (!isDragging || disabled) return\n\n    // Set styles to prevent text selection and force an ew-resize cursor whilst\n    // dragging. Return a reset callback so we can revert to any values that\n    // might have been present before dragging started.\n    function setDocumentStyles() {\n      const bodyStyle = document.body.style\n      const documentStyle = document.documentElement.style\n\n      const {cursor} = documentStyle\n      const {userSelect} = bodyStyle\n\n      documentStyle.cursor = 'ew-resize'\n      bodyStyle.userSelect = 'none'\n\n      return () => {\n        if (cursor) documentStyle.cursor = cursor\n        else documentStyle.removeProperty('cursor')\n\n        if (userSelect) bodyStyle.userSelect = userSelect\n        else bodyStyle.removeProperty('user-select')\n      }\n    }\n\n    const resetDocumentStyles = setDocumentStyles()\n    window.addEventListener('mousemove', onDrag)\n    window.addEventListener('mouseup', onDragStop)\n    window.addEventListener('contextmenu', onDragStop)\n\n    return () => {\n      resetDocumentStyles()\n      window.removeEventListener('mousemove', onDrag)\n      window.removeEventListener('mouseup', onDragStop)\n      window.removeEventListener('contextmenu', onDragStop)\n    }\n  }, [disabled, isDragging, onDrag, onDragStop])\n\n  useLayoutEffect(() => {\n    registerElement(id, {id, order, type: 'resizer', el})\n\n    return () => {\n      unregisterElement(id)\n    }\n  }, [id, order, registerElement, unregisterElement])\n\n  return (\n    <Resizer onMouseDown={onMouseDown} ref={el}>\n      <ResizerInner $disabled={disabled}>\n        <span />\n        <span />\n      </ResizerInner>\n    </Resizer>\n  )\n}\n","import {useRef} from 'react'\nimport {v4 as uuid} from 'uuid'\n\nexport function usePanelId(id?: string): string {\n  const idRef = useRef(id || uuid())\n  return idRef.current\n}\n","import {\n  type Dispatch,\n  type FunctionComponent,\n  type PropsWithChildren,\n  type SetStateAction,\n} from 'react'\nimport type {Path, SanityDocument} from 'sanity'\n\nimport {ContentEditor} from './editor/ContentEditor'\nimport {type CommentIntentGetter, CommentsIntentProvider} from './internals'\nimport {DisplayedDocumentBroadcasterProvider} from './loader/DisplayedDocumentBroadcaster'\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {\n  MainDocumentState,\n  PresentationParams,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nexport interface PresentationContentProps {\n  documentId: PresentationParams['id']\n  documentsOnPage: {_id: string; _type: string}[]\n  documentType: PresentationParams['type']\n  getCommentIntent: CommentIntentGetter\n  mainDocumentState: MainDocumentState | undefined\n  onFocusPath: (path: Path) => void\n  onStructureParams: (params: StructureDocumentPaneParams) => void\n  searchParams: PresentationSearchParams\n  setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  structureParams: StructureDocumentPaneParams\n}\n\nconst PresentationContentWrapper: FunctionComponent<\n  PropsWithChildren<{\n    documentId?: string\n    getCommentIntent: CommentIntentGetter\n    setDisplayedDocument: Dispatch<SetStateAction<Partial<SanityDocument> | null | undefined>>\n  }>\n> = (props) => {\n  const {documentId, setDisplayedDocument, getCommentIntent} = props\n  return (\n    <>\n      <PanelResizer order={4} />\n      <Panel id=\"content\" minWidth={325} order={5}>\n        <DisplayedDocumentBroadcasterProvider\n          documentId={documentId}\n          setDisplayedDocument={setDisplayedDocument}\n        >\n          <CommentsIntentProvider getIntent={getCommentIntent}>\n            {props.children}\n          </CommentsIntentProvider>\n        </DisplayedDocumentBroadcasterProvider>\n      </Panel>\n    </>\n  )\n}\n\nexport const PresentationContent: FunctionComponent<PresentationContentProps> = (props) => {\n  const {\n    documentId,\n    documentsOnPage,\n    documentType,\n    getCommentIntent,\n    mainDocumentState,\n    onFocusPath,\n    onStructureParams,\n    searchParams,\n    setDisplayedDocument,\n    structureParams,\n  } = props\n\n  return (\n    <PresentationContentWrapper\n      documentId={documentId}\n      getCommentIntent={getCommentIntent}\n      setDisplayedDocument={setDisplayedDocument}\n    >\n      <ContentEditor\n        documentId={documentId}\n        documentType={documentType}\n        mainDocumentState={mainDocumentState}\n        onFocusPath={onFocusPath}\n        onStructureParams={onStructureParams}\n        refs={documentsOnPage}\n        searchParams={searchParams}\n        structureParams={structureParams}\n      />\n    </PresentationContentWrapper>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useCallback} from 'react'\n\nimport {\n  PresentationNavigateContext,\n  type PresentationNavigateContextValue,\n} from './PresentationNavigateContext'\nimport type {PresentationNavigate} from './types'\n\nexport const PresentationNavigateProvider: FunctionComponent<\n  PropsWithChildren<{\n    navigate: PresentationNavigate\n  }>\n> = function (props) {\n  const {children, navigate: _navigate} = props\n\n  const navigate = useCallback<PresentationNavigateContextValue>(\n    (preview, document = undefined) => {\n      _navigate(document || {}, preview ? {preview} : {})\n    },\n    [_navigate],\n  )\n\n  return (\n    <PresentationNavigateContext.Provider value={navigate}>\n      {children}\n    </PresentationNavigateContext.Provider>\n  )\n}\n","import {memo, useCallback, useMemo} from 'react'\n\nimport {Panel} from './panels/Panel'\nimport {PanelResizer} from './panels/PanelResizer'\nimport type {NavigatorOptions} from './types'\nimport {useLocalState} from './useLocalState'\n\n/** @internal */\nexport interface UsePresentationNavigatorProps {\n  unstable_navigator?: NavigatorOptions\n}\n\n/** @internal */\nexport interface UsePresentationNavigatorState {\n  navigatorEnabled: boolean\n  toggleNavigator: (() => void) | undefined\n}\n\n/** @internal */\nexport function usePresentationNavigator(\n  props: UsePresentationNavigatorProps,\n): [UsePresentationNavigatorState, () => JSX.Element] {\n  const {unstable_navigator} = props\n\n  const navigatorProvided = !!unstable_navigator?.component\n  const [_navigatorEnabled, setNavigatorEnabled] = useLocalState<boolean>(\n    'presentation/navigator',\n    navigatorProvided,\n  )\n  const navigatorEnabled = navigatorProvided ? _navigatorEnabled : false\n  const toggleNavigator = useMemo(() => {\n    if (!navigatorProvided) return undefined\n\n    return () => setNavigatorEnabled((enabled) => !enabled)\n  }, [navigatorProvided, setNavigatorEnabled])\n\n  const Component = useCallback(\n    function PresentationNavigator() {\n      return <>{navigatorEnabled && <Navigator {...unstable_navigator!} />}</>\n    },\n    [navigatorEnabled, unstable_navigator],\n  )\n\n  return [{navigatorEnabled, toggleNavigator}, Component]\n}\n\nfunction NavigatorComponent(props: NavigatorOptions) {\n  const {minWidth, maxWidth, component: NavigatorComponent} = props\n  const navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth\n  return (\n    <>\n      <Panel id=\"navigator\" minWidth={minWidth} maxWidth={maxWidth} order={1}>\n        <NavigatorComponent />\n      </Panel>\n      <PanelResizer order={2} disabled={navigatorDisabled} />\n    </>\n  )\n}\nconst Navigator = memo(NavigatorComponent)\n","import {type Dispatch, type SetStateAction, useEffect, useState} from 'react'\n\nexport function useLocalState<T>(key: string, defaultValue: T): [T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(() =>\n    JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue)),\n  )\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value))\n  }, [key, value])\n\n  return [value, setValue]\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationParamsContext} from './PresentationParamsContext'\nimport type {PresentationParams} from './types'\n\nexport const PresentationParamsProvider: FunctionComponent<\n  PropsWithChildren<{\n    params: PresentationParams\n  }>\n> = function (props) {\n  const {children, params} = props\n\n  const context = useMemo<PresentationParams>(() => params, [params])\n\n  return (\n    <PresentationParamsContext.Provider value={context}>\n      {children}\n    </PresentationParamsContext.Provider>\n  )\n}\n","import {type FunctionComponent, type PropsWithChildren, useMemo} from 'react'\n\nimport {PresentationContext, type PresentationContextValue} from './PresentationContext'\nimport type {\n  PresentationNavigate,\n  PresentationParams,\n  PresentationSearchParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nexport const PresentationProvider: FunctionComponent<\n  PropsWithChildren<{\n    devMode: boolean\n    name: string\n    navigate: PresentationNavigate\n    params: PresentationParams\n    searchParams: PresentationSearchParams\n    structureParams: StructureDocumentPaneParams\n  }>\n> = function (props) {\n  const {children, devMode, name, navigate, params, searchParams, structureParams} = props\n\n  const context = useMemo<PresentationContextValue>(\n    () => ({\n      devMode,\n      name,\n      navigate,\n      params,\n      searchParams,\n      structureParams,\n    }),\n    [devMode, name, navigate, params, searchParams, structureParams],\n  )\n\n  return <PresentationContext.Provider value={context}>{children}</PresentationContext.Provider>\n}\n","import type {Dispatch, Reducer} from 'react'\nimport {boolean, fallback, object, parse, picklist} from 'valibot'\n\nexport interface PresentationState {\n  mainDocument: boolean\n  iframe: {\n    status: 'loading' | 'loaded' | 'refreshing' | 'reloading'\n  }\n  visualEditing: {\n    overlaysEnabled: boolean\n  }\n}\n\nexport const ACTION_IFRAME_LOADED = 'ACTION_IFRAME_LOADED'\nexport const ACTION_IFRAME_REFRESH = 'ACTION_IFRAME_REFRESH'\nexport const ACTION_IFRAME_RELOAD = 'ACTION_IFRAME_RELOAD'\nexport const ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE = 'ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE'\n\ninterface IframeLoadedAction {\n  type: typeof ACTION_IFRAME_LOADED\n}\ninterface IframeRefreshAction {\n  type: typeof ACTION_IFRAME_REFRESH\n}\ninterface IframeReloadAction {\n  type: typeof ACTION_IFRAME_RELOAD\n}\ninterface VisualEditingOverlaysToggleAction {\n  type: typeof ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE\n  enabled: boolean\n}\n\ntype PresentationAction =\n  | IframeLoadedAction\n  | IframeRefreshAction\n  | IframeReloadAction\n  | VisualEditingOverlaysToggleAction\n\nexport const presentationReducer: Reducer<\n  Readonly<PresentationState>,\n  Readonly<PresentationAction>\n> = (state, action) => {\n  switch (action.type) {\n    case ACTION_IFRAME_LOADED:\n      return state.iframe.status === 'loaded'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'loaded',\n            },\n          }\n    case ACTION_IFRAME_REFRESH:\n      return state.iframe.status === 'refreshing'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'refreshing',\n            },\n          }\n    case ACTION_IFRAME_RELOAD:\n      return state.iframe.status === 'reloading'\n        ? state\n        : {\n            ...state,\n            iframe: {\n              ...state.iframe,\n              status: 'reloading',\n            },\n          }\n    case ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE:\n      return toggleVisualEditingOverlays(state, action)\n    default:\n      return state\n  }\n}\n\nconst toggleVisualEditingOverlays: Reducer<\n  Readonly<PresentationState>,\n  Readonly<VisualEditingOverlaysToggleAction>\n> = (state, action) => {\n  if (state.visualEditing.overlaysEnabled === action.enabled) return state\n  return {\n    ...state,\n    visualEditing: {\n      ...state.visualEditing,\n      overlaysEnabled: action.enabled,\n    },\n  }\n}\n\nconst mainDocumentSchema = fallback(boolean(), false)\n\nconst iframeStatusSchema = picklist(['loading', 'loaded', 'refreshing', 'reloading'])\n\nconst initStateSchema = object({\n  mainDocument: mainDocumentSchema,\n  iframe: object({\n    status: iframeStatusSchema,\n  }),\n  visualEditing: object({overlaysEnabled: boolean()}),\n})\n\nconst INITIAL_PRESENTATION_STATE = {\n  mainDocument: false,\n  iframe: {\n    status: 'loading',\n  },\n  visualEditing: {\n    overlaysEnabled: false,\n  },\n} as const satisfies PresentationState\n\nexport function presentationReducerInit(\n  state: Readonly<Partial<PresentationState>>,\n): Readonly<PresentationState> {\n  return parse(initStateSchema, {...INITIAL_PRESENTATION_STATE, ...state})\n}\n\nexport type DispatchPresentationAction = Dispatch<Readonly<PresentationAction>>\n","import {Box} from '@sanity/ui'\nimport {motion, type VariantLabels, type Variants} from 'framer-motion'\nimport {forwardRef, type ReactEventHandler} from 'react'\nimport {styled} from 'styled-components'\n\nconst IFrameElement = motion(styled.iframe`\n  box-shadow: 0 0 0 1px var(--card-border-color);\n  border-top: 1px solid transparent;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  max-height: 100%;\n  width: 100%;\n`)\n\nconst IFrameOverlay = styled(Box)`\n  position: absolute;\n  inset: 0;\n  background: transparent;\n`\n\ninterface IFrameProps {\n  animate: VariantLabels\n  initial: VariantLabels\n  onLoad: ReactEventHandler<HTMLIFrameElement>\n  preventClick: boolean\n  src: string\n  variants: Variants\n}\n\nexport const IFrame = forwardRef<HTMLIFrameElement, IFrameProps>(function IFrame(props, ref) {\n  const {animate, initial, onLoad, preventClick, src, variants} = props\n\n  return (\n    <>\n      <IFrameElement\n        animate={animate}\n        initial={initial}\n        onLoad={onLoad}\n        ref={ref}\n        src={src}\n        variants={variants}\n      />\n      {preventClick && <IFrameOverlay />}\n    </>\n  )\n})\n","import {ResetIcon} from '@sanity/icons'\nimport {TextInput, type TextInputClearButtonProps} from '@sanity/ui'\nimport {\n  type ChangeEvent,\n  type FunctionComponent,\n  type KeyboardEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {presentationLocaleNamespace} from '../i18n'\nimport {useActiveWorkspace} from '../internals'\n\nexport const PreviewLocationInput: FunctionComponent<{\n  fontSize?: number\n  onChange: (value: string) => void\n  origin: string\n  padding?: number\n  prefix?: ReactNode\n  suffix?: ReactNode\n  value: string\n}> = function (props) {\n  const {fontSize = 1, onChange, origin, padding = 3, prefix, suffix, value} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {basePath = '/'} = useActiveWorkspace()?.activeWorkspace || {}\n\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [sessionValue, setSessionValue] = useState<string | undefined>(undefined)\n  const [customValidity, setCustomValidity] = useState<string | undefined>(undefined)\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setSessionValue(event.currentTarget.value)\n  }, [])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        if (sessionValue === undefined) {\n          return\n        }\n\n        const absoluteValue =\n          sessionValue.startsWith('/') || sessionValue === ''\n            ? `${origin}${sessionValue}`\n            : sessionValue\n\n        if (!absoluteValue.startsWith(origin + '/') && absoluteValue !== origin) {\n          setCustomValidity(t('preview-location-input.error', {origin, context: 'missing-origin'}))\n          return\n        }\n        // `origin` is an empty string '' if the Studio is embedded, and that's when we need to protect against recursion\n        if (!origin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {\n          setCustomValidity(\n            t('preview-location-input.error', {basePath, context: 'same-base-path'}),\n          )\n          return\n        }\n\n        const nextValue = absoluteValue === origin ? origin + '/' : absoluteValue\n\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n\n        onChange(nextValue.slice(origin.length))\n\n        inputRef.current?.blur()\n      }\n\n      if (event.key === 'Escape') {\n        setCustomValidity(undefined)\n        setSessionValue(undefined)\n      }\n    },\n    [basePath, onChange, origin, sessionValue, t],\n  )\n\n  const handleBlur = useCallback(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [])\n\n  useEffect(() => {\n    setCustomValidity(undefined)\n    setSessionValue(undefined)\n  }, [origin, value])\n\n  const resetButton: TextInputClearButtonProps = useMemo(() => ({icon: ResetIcon}), [])\n\n  return (\n    <>\n      <TextInput\n        clearButton={customValidity ? resetButton : undefined}\n        customValidity={customValidity}\n        fontSize={fontSize}\n        onBlur={handleBlur}\n        onClear={() => {\n          setCustomValidity(undefined)\n          setSessionValue(origin + value)\n        }}\n        onChange={handleChange}\n        onKeyDownCapture={handleKeyDown}\n        padding={padding}\n        prefix={prefix}\n        style={{zIndex: 1}}\n        radius={2}\n        ref={inputRef}\n        space={padding}\n        suffix={suffix}\n        value={sessionValue === undefined ? `${origin}${value}` : sessionValue}\n      />\n    </>\n  )\n}\n","import {CopyIcon, LaunchIcon} from '@sanity/icons'\nimport {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {\n  hasSecretSearchParams,\n  setSecretSearchParams,\n} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {MenuItem, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {useClient, useCurrentUser, useTranslation} from 'sanity'\n\nimport {API_VERSION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport type {PreviewFrameProps} from './PreviewFrame'\n\n/** @internal */\nexport function ShareUrlMenuItems(\n  props: Pick<PreviewFrameProps, 'initialUrl' | 'openPopup'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n): React.ReactNode {\n  const {initialUrl, openPopup, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n\n  const handleOpenPopup = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n      event.preventDefault()\n      openPopup(event.currentTarget.href)\n    },\n    [openPopup],\n  )\n\n  return (\n    <>\n      <CopyUrlMenuButton\n        initialUrl={initialUrl}\n        previewLocationOrigin={previewLocationOrigin}\n        previewLocationRoute={previewLocationRoute}\n      />\n      <MenuItem\n        icon={LaunchIcon}\n        text={t('share-url.menu-item.open.text')}\n        as=\"a\"\n        href={`${previewLocationOrigin}${previewLocationRoute}`}\n        // @ts-expect-error the `as=\"a\"` prop isn't enough to change the type of event.target from <div> to <a>\n        onClick={handleOpenPopup}\n        rel=\"opener\"\n        target=\"_blank\"\n      />\n    </>\n  )\n}\n\nfunction CopyUrlMenuButton(\n  props: Pick<PreviewFrameProps, 'initialUrl'> & {\n    previewLocationOrigin: string\n    previewLocationRoute: string\n  },\n) {\n  const {initialUrl, previewLocationOrigin, previewLocationRoute} = props\n\n  const {t} = useTranslation(presentationLocaleNamespace)\n  const {push: pushToast} = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [disabled, setDisabled] = useState(false)\n\n  return (\n    <MenuItem\n      disabled={disabled}\n      onClick={() => {\n        if (!navigator?.clipboard) {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'unsupported'}),\n          })\n          return false\n        }\n        setDisabled(true)\n\n        let id: string | undefined = undefined\n        const url = `${previewLocationOrigin}${previewLocationRoute}`\n        const onFinally = () => {\n          pushToast({\n            id,\n            closable: true,\n            status: 'success',\n            title: t('share-url.clipboard.status', {context: 'success'}),\n          })\n          setDisabled(false)\n        }\n        const onError = (error: Error) => {\n          pushToast({\n            closable: true,\n            status: 'error',\n            title: t('share-url.clipboard.status', {context: 'failed'}),\n            description: error.message || error.toString(),\n          })\n          setDisabled(false)\n        }\n        if (hasSecretSearchParams(initialUrl)) {\n          const resolvePreviewUrl = async () => {\n            id = pushToast({\n              closable: true,\n              title: t('share-url.clipboard.status', {context: 'copying'}),\n            })\n            const previewUrlSecret = await createPreviewSecret(\n              client,\n              '@sanity/presentation',\n              typeof window === 'undefined' ? '' : location.href,\n              currentUser?.id,\n            )\n\n            const newUrl = setSecretSearchParams(\n              initialUrl,\n              previewUrlSecret.secret,\n              previewLocationRoute,\n            )\n            return newUrl.toString()\n          }\n          if (typeof ClipboardItem !== 'undefined') {\n            const type = 'text/plain'\n            // Try to save to clipboard then save it in the state if worked\n            const item = new ClipboardItem({\n              [type]: resolvePreviewUrl().then((url) => new Blob([url], {type})),\n            })\n            navigator.clipboard.write([item]).then(onFinally).catch(onError)\n          } else {\n            resolvePreviewUrl()\n              .then((url) => navigator.clipboard.writeText(url))\n              .then(onFinally)\n              .catch(onError)\n          }\n        } else {\n          navigator.clipboard.writeText(url).then(onFinally).catch(onError)\n        }\n        return\n      }}\n      text={t('share-url.menu-item.copy.text')}\n      icon={CopyIcon}\n    />\n  )\n}\n","import type {ChannelStatus} from '@repo/channels'\nimport {\n  CheckmarkIcon,\n  ChevronDownIcon,\n  DesktopIcon,\n  EditIcon,\n  MobileDeviceIcon,\n  PanelLeftIcon,\n  PublishIcon,\n  RefreshIcon,\n  ShareIcon,\n} from '@sanity/icons'\nimport {withoutSecretSearchParams} from '@sanity/preview-url-secret/without-secret-search-params'\nimport {\n  Box,\n  Button,\n  type ButtonTone,\n  Card,\n  Code,\n  Flex,\n  Label,\n  Menu,\n  MenuButton,\n  MenuItem,\n  Spinner,\n  Stack,\n  Switch,\n  Text,\n  Tooltip,\n  TooltipDelayGroupProvider,\n  usePrefersReducedMotion,\n} from '@sanity/ui'\nimport {AnimatePresence, motion, MotionConfig} from 'framer-motion'\nimport {\n  type ComponentType,\n  createElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Hotkeys, useTranslation} from 'sanity'\n\nimport {ErrorCard} from '../components/ErrorCard'\nimport {MAX_TIME_TO_OVERLAYS_CONNECTION} from '../constants'\nimport {presentationLocaleNamespace} from '../i18n'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_RELOAD,\n  type DispatchPresentationAction,\n  type PresentationState,\n} from '../reducers/presentationReducer'\nimport type {PresentationPerspective, PresentationViewport} from '../types'\nimport {usePresentationTool} from '../usePresentationTool'\nimport {IFrame} from './IFrame'\nimport {PreviewLocationInput} from './PreviewLocationInput'\nimport {ShareUrlMenuItems} from './ShareUrlMenuItems'\n\nconst MotionFlex = motion(Flex)\n\nconst PERSPECTIVE_TITLE_KEY: Record<PresentationPerspective, string> = {\n  previewDrafts: 'preview-frame.perspective.previewDrafts.title',\n  published: 'preview-frame.perspective.published.title',\n}\n\nconst PERSPECTIVE_TONES: Record<PresentationPerspective, ButtonTone> = {\n  previewDrafts: 'caution',\n  published: 'positive',\n}\n\nconst PERSPECTIVE_ICONS: Record<PresentationPerspective, ComponentType> = {\n  previewDrafts: EditIcon,\n  published: PublishIcon,\n}\n\nexport interface PreviewFrameProps extends Pick<PresentationState, 'iframe' | 'visualEditing'> {\n  dispatch: DispatchPresentationAction\n  initialUrl: URL\n  loadersConnection: ChannelStatus\n  navigatorEnabled: boolean\n  onPathChange: (nextPath: string) => void\n  onRefresh: (fallback: () => void) => void\n  openPopup: (url: string) => void\n  overlaysConnection: ChannelStatus\n  perspective: PresentationPerspective\n  previewUrl?: string\n  setPerspective: (perspective: 'previewDrafts' | 'published') => void\n  setViewport: (mode: 'desktop' | 'mobile') => void\n  targetOrigin: string\n  toggleNavigator?: () => void\n  toggleOverlay: () => void\n  viewport: PresentationViewport\n}\n\nexport const PreviewFrame = forwardRef<HTMLIFrameElement, PreviewFrameProps>(\n  function PreviewFrame(props, ref) {\n    const {\n      dispatch,\n      iframe,\n      initialUrl,\n      loadersConnection,\n      navigatorEnabled,\n      onPathChange,\n      onRefresh,\n      openPopup,\n      overlaysConnection,\n      perspective,\n      previewUrl,\n      setPerspective,\n      setViewport,\n      targetOrigin,\n      toggleNavigator,\n      toggleOverlay,\n      viewport,\n      visualEditing: {overlaysEnabled},\n    } = props\n\n    const {t} = useTranslation(presentationLocaleNamespace)\n    const {devMode} = usePresentationTool()\n    const prefersReducedMotion = usePrefersReducedMotion()\n\n    const toggleViewportSize = useCallback(\n      () => setViewport(viewport === 'desktop' ? 'mobile' : 'desktop'),\n      [setViewport, viewport],\n    )\n    const loading = iframe.status === 'loading' || iframe.status === 'reloading'\n    const [timedOut, setTimedOut] = useState(false)\n    const refreshing = iframe.status === 'refreshing'\n    const [somethingIsWrong, setSomethingIsWrong] = useState(false)\n    const iframeIsBusy = loading || refreshing || overlaysConnection === 'connecting'\n\n    const previewLocationOrigin = useMemo(() => {\n      return targetOrigin === location.origin ? '' : targetOrigin\n    }, [targetOrigin])\n\n    const handleRefresh = useCallback(() => {\n      onRefresh(() => {\n        if (typeof ref === 'function' || !ref?.current) {\n          return\n        }\n        dispatch({type: ACTION_IFRAME_RELOAD})\n        // Funky way to reload an iframe without CORS issues\n        // eslint-disable-next-line no-self-assign\n        // ref.current.src = ref.current.src\n        ref.current.src = `${targetOrigin}${previewUrl || '/'}`\n      })\n    }, [dispatch, onRefresh, previewUrl, targetOrigin, ref])\n    const handleRetry = useCallback(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n\n      ref.current.src = initialUrl.toString()\n\n      dispatch({type: ACTION_IFRAME_RELOAD})\n    }, [dispatch, ref, initialUrl])\n    const handleContinueAnyway = useCallback(() => {\n      setContinueAnyway(true)\n    }, [])\n\n    const [continueAnyway, setContinueAnyway] = useState(false)\n    const [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = useState(false)\n    useEffect(() => {\n      if (loading || refreshing) {\n        return\n      }\n\n      if (overlaysConnection === 'connecting' || overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setShowOverlaysConnectionState(true)\n        }, 1000)\n        return () => clearTimeout(timeout)\n      }\n      return\n    }, [overlaysConnection, loading, refreshing])\n\n    useEffect(() => {\n      if (loading || refreshing || !showOverlaysConnectionStatus) {\n        return\n      }\n      if (overlaysConnection === 'connected') {\n        setSomethingIsWrong(false)\n        setShowOverlaysConnectionState(false)\n        setTimedOut(false)\n        setContinueAnyway(false)\n      }\n      if (overlaysConnection === 'connecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          // eslint-disable-next-line no-console\n          console.error(\n            `Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly`,\n          )\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'reconnecting') {\n        const timeout = setTimeout(() => {\n          setTimedOut(true)\n          setSomethingIsWrong(true)\n        }, MAX_TIME_TO_OVERLAYS_CONNECTION)\n        return () => clearTimeout(timeout)\n      }\n      if (overlaysConnection === 'disconnected') {\n        setSomethingIsWrong(true)\n      }\n      return\n    }, [loading, overlaysConnection, refreshing, showOverlaysConnectionStatus])\n\n    const previewLocationRoute = useMemo(() => {\n      const previewURL = new URL(previewUrl || '/', targetOrigin)\n      const {pathname, search} = withoutSecretSearchParams(previewURL)\n\n      return `${pathname}${search}`\n    }, [previewUrl, targetOrigin])\n\n    const onIFrameLoad = useCallback(() => {\n      dispatch({type: ACTION_IFRAME_LOADED})\n    }, [dispatch])\n\n    /**\n     * Ensure that clicking outside of menus and dialogs will close as focus shifts to the iframe\n     */\n    useEffect(() => {\n      if (typeof ref === 'function' || !ref?.current) {\n        return\n      }\n      const instance = ref.current\n      function handleBlur() {\n        if (instance !== document.activeElement) {\n          return\n        }\n\n        instance.dispatchEvent(new MouseEvent('mousedown', {bubbles: true, cancelable: true}))\n      }\n      window.addEventListener('blur', handleBlur)\n      return () => {\n        window.removeEventListener('blur', handleBlur)\n      }\n    }, [ref])\n\n    const preventIframeInteraction = useMemo(() => {\n      return (\n        (loading || (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n        !continueAnyway\n      )\n    }, [continueAnyway, iframe.status, loading, overlaysConnection])\n\n    const iframeAnimations = useMemo(() => {\n      return [\n        preventIframeInteraction ? 'background' : 'active',\n        loading ? 'reloading' : 'idle',\n        viewport,\n        showOverlaysConnectionStatus && !continueAnyway ? 'timedOut' : '',\n      ]\n    }, [continueAnyway, loading, preventIframeInteraction, showOverlaysConnectionStatus, viewport])\n\n    return (\n      <MotionConfig transition={prefersReducedMotion ? {duration: 0} : undefined}>\n        <TooltipDelayGroupProvider delay={1000}>\n          <Card flex=\"none\" padding={2} shadow={1} style={{position: 'relative'}}>\n            <Flex align=\"center\" style={{minHeight: 0}}>\n              {toggleNavigator && (\n                <Box flex=\"none\" marginRight={1} padding={1}>\n                  <Tooltip\n                    animate\n                    content={\n                      <Text size={1}>{t('preview-frame.navigator.toggle-button.tooltip')}</Text>\n                    }\n                    fallbackPlacements={['bottom-start']}\n                    padding={2}\n                    placement=\"bottom\"\n                    portal\n                  >\n                    <Button\n                      aria-label={t('preview-frame.navigator.toggle-button.aria-label')}\n                      fontSize={1}\n                      icon={PanelLeftIcon}\n                      mode=\"bleed\"\n                      onClick={toggleNavigator}\n                      padding={2}\n                      selected={navigatorEnabled}\n                    />\n                  </Tooltip>\n                </Box>\n              )}\n\n              <Tooltip\n                animate\n                content={\n                  <Flex align=\"center\" style={{whiteSpace: 'nowrap'}}>\n                    <Box padding={1}>\n                      <Text size={1}>\n                        {t('preview-frame.overlay.toggle-button.tooltip', {\n                          context: overlaysEnabled ? 'disable' : 'enable',\n                        })}\n                      </Text>\n                    </Box>\n                    <Box paddingY={1}>\n                      <Hotkeys keys={['Alt']} style={{marginTop: -4, marginBottom: -4}} />\n                    </Box>\n                  </Flex>\n                }\n                fallbackPlacements={['bottom-start']}\n                padding={1}\n                placement=\"bottom\"\n                portal\n              >\n                <Card\n                  as=\"label\"\n                  flex=\"none\"\n                  marginRight={1}\n                  padding={3}\n                  style={{\n                    lineHeight: 0,\n                    borderRadius: 999,\n                    userSelect: 'none',\n                  }}\n                  tone={overlaysEnabled ? 'transparent' : undefined}\n                >\n                  <Flex align=\"center\" gap={3}>\n                    <div style={{margin: -4}}>\n                      <Switch\n                        checked={overlaysEnabled}\n                        onChange={toggleOverlay}\n                        disabled={iframe.status === 'loading' || overlaysConnection !== 'connected'}\n                      />\n                    </div>\n                    <Box>\n                      <Text muted={!overlaysEnabled} size={1} weight=\"medium\">\n                        {t('preview-frame.overlay.toggle-button.text')}\n                      </Text>\n                    </Box>\n                  </Flex>\n                </Card>\n              </Tooltip>\n\n              <Box flex={1} marginX={1}>\n                <PreviewLocationInput\n                  prefix={\n                    <Box padding={1}>\n                      <Tooltip\n                        animate\n                        content={\n                          <Text size={1}>\n                            {iframe.status === 'loaded'\n                              ? t('preview-frame.refresh-button.tooltip')\n                              : t('preview-frame.status', {context: iframe.status})}\n                          </Text>\n                        }\n                        fallbackPlacements={['bottom-start']}\n                        padding={2}\n                        placement=\"bottom\"\n                        portal\n                      >\n                        <Button\n                          aria-label={t('preview-frame.refresh-button.aria-label')}\n                          fontSize={1}\n                          icon={RefreshIcon}\n                          mode=\"bleed\"\n                          loading={iframe.status === 'reloading' || iframe.status === 'refreshing'}\n                          onClick={handleRefresh}\n                          padding={2}\n                        />\n                      </Tooltip>\n                    </Box>\n                  }\n                  onChange={onPathChange}\n                  origin={previewLocationOrigin}\n                  suffix={\n                    <Box padding={1}>\n                      <MenuButton\n                        button={\n                          <Button\n                            fontSize={1}\n                            iconRight={ShareIcon}\n                            mode=\"bleed\"\n                            padding={2}\n                            space={2}\n                          />\n                        }\n                        id=\"location-menu\"\n                        menu={\n                          <Menu>\n                            <ShareUrlMenuItems\n                              initialUrl={initialUrl}\n                              openPopup={openPopup}\n                              previewLocationOrigin={previewLocationOrigin}\n                              previewLocationRoute={previewLocationRoute}\n                            />\n                          </Menu>\n                        }\n                        popover={{\n                          animate: true,\n                          constrainSize: true,\n                          placement: 'bottom',\n                          portal: true,\n                        }}\n                      />\n                    </Box>\n                  }\n                  value={previewLocationRoute}\n                />\n              </Box>\n\n              <Flex align=\"center\" flex=\"none\" gap={1} padding={1}>\n                <MenuButton\n                  button={\n                    <Button\n                      fontSize={1}\n                      iconRight={ChevronDownIcon}\n                      mode=\"bleed\"\n                      padding={2}\n                      space={2}\n                      text={t(\n                        PERSPECTIVE_TITLE_KEY[\n                          loadersConnection === 'connected' ? perspective : 'previewDrafts'\n                        ],\n                      )}\n                      loading={loadersConnection === 'reconnecting' && iframe.status !== 'loaded'}\n                      disabled={loadersConnection !== 'connected'}\n                    />\n                  }\n                  id=\"perspective-menu\"\n                  menu={\n                    <Menu style={{maxWidth: 240}}>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() => setPerspective('previewDrafts')}\n                        padding={3}\n                        pressed={perspective === 'previewDrafts'}\n                        tone={PERSPECTIVE_TONES.previewDrafts}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.previewDrafts)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['previewDrafts'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.previewDrafts.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'previewDrafts' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                      <MenuItem\n                        fontSize={1}\n                        onClick={() => setPerspective('published')}\n                        padding={3}\n                        pressed={perspective === 'published'}\n                        tone={PERSPECTIVE_TONES.published}\n                      >\n                        <Flex align=\"flex-start\" gap={3}>\n                          <Box flex=\"none\">\n                            <Text size={1}>{createElement(PERSPECTIVE_ICONS.published)}</Text>\n                          </Box>\n                          <Stack flex={1} space={2}>\n                            <Text size={1} weight=\"medium\">\n                              {t(PERSPECTIVE_TITLE_KEY['published'])}\n                            </Text>\n                            <Text muted size={1}>\n                              {t('preview-frame.perspective.published.text')}\n                            </Text>\n                          </Stack>\n                          <Box flex=\"none\">\n                            <Text\n                              muted\n                              size={1}\n                              style={{\n                                opacity: perspective === 'published' ? 1 : 0,\n                              }}\n                            >\n                              <CheckmarkIcon />\n                            </Text>\n                          </Box>\n                        </Flex>\n                      </MenuItem>\n                    </Menu>\n                  }\n                  popover={{\n                    animate: true,\n                    constrainSize: true,\n                    placement: 'bottom',\n                    portal: true,\n                  }}\n                />\n              </Flex>\n\n              <Flex align=\"center\" flex=\"none\" gap={1}>\n                <Tooltip\n                  animate\n                  content={\n                    <Text size={1}>\n                      {t('preview-frame.viewport-button.tooltip', {\n                        context: viewport === 'desktop' ? 'narrow' : 'full',\n                      })}\n                    </Text>\n                  }\n                  fallbackPlacements={['bottom-start']}\n                  padding={2}\n                  placement=\"bottom\"\n                  portal\n                >\n                  <Button\n                    aria-label={t('preview-frame.viewport-button.aria-label')}\n                    fontSize={1}\n                    icon={viewport === 'desktop' ? MobileDeviceIcon : DesktopIcon}\n                    mode=\"bleed\"\n                    onClick={toggleViewportSize}\n                    padding={2}\n                  />\n                </Tooltip>\n              </Flex>\n            </Flex>\n          </Card>\n\n          <Card flex={1} tone=\"transparent\">\n            <Flex\n              align=\"center\"\n              height=\"fill\"\n              justify=\"center\"\n              padding={viewport === 'desktop' ? 0 : 2}\n              sizing=\"border\"\n              style={{\n                position: 'relative',\n                cursor: iframeIsBusy ? 'wait' : undefined,\n              }}\n            >\n              <AnimatePresence>\n                {!somethingIsWrong &&\n                !loading &&\n                !refreshing &&\n                showOverlaysConnectionStatus &&\n                !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      backdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      ['transition' as string]: 'backdrop-filter 0.2s ease-in-out',\n                      // @TODO Because of Safari we have to do this\n                      WebkitBackdropFilter: timedOut\n                        ? 'blur(16px) saturate(0.5) grayscale(0.5)'\n                        : 'blur(2px)',\n                      WebkitTransition: '-webkit-backdrop-filter 0.2s ease-in-out',\n                      zIndex: 1,\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      {timedOut && (\n                        <Button\n                          disabled\n                          fontSize={1}\n                          mode=\"ghost\"\n                          text={t('preview-frame.continue-button.text')}\n                          style={{opacity: 0}}\n                        />\n                      )}\n                      <Card\n                        radius={2}\n                        tone={timedOut ? 'caution' : 'inherit'}\n                        padding={4}\n                        shadow={1}\n                      >\n                        <Flex justify=\"center\" align=\"center\" direction=\"column\" gap={4}>\n                          <Spinner muted />\n                          <Text muted size={1}>\n                            {timedOut\n                              ? t('preview-frame.status', {context: 'timeout'})\n                              : t('preview-frame.status', {context: 'connecting'})}\n                          </Text>\n                        </Flex>\n                      </Card>\n                      {timedOut && (\n                        <Button\n                          fontSize={1}\n                          // mode=\"ghost\"\n                          tone=\"critical\"\n                          onClick={handleContinueAnyway}\n                          text={t('preview-frame.continue-button.text')}\n                        />\n                      )}\n                    </Flex>\n                  </MotionFlex>\n                ) : (loading ||\n                    (overlaysConnection === 'connecting' && iframe.status !== 'refreshing')) &&\n                  !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={spinnerVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      inset: '0',\n                      position: 'absolute',\n                      // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',\n                    }}\n                  >\n                    <Flex\n                      style={{...sizes[viewport]}}\n                      justify=\"center\"\n                      align=\"center\"\n                      direction=\"column\"\n                      gap={4}\n                    >\n                      <Spinner muted />\n                      <Text muted size={1}>\n                        {t('preview-frame.status', {context: 'loading'})}\n                      </Text>\n                    </Flex>\n                  </MotionFlex>\n                ) : somethingIsWrong && !continueAnyway ? (\n                  <MotionFlex\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={errorVariants}\n                    justify=\"center\"\n                    align=\"center\"\n                    style={{\n                      background: 'var(--card-bg-color)',\n                      inset: '0',\n                      position: 'absolute',\n                      borderTop: '1px solid transparent',\n                      boxShadow: '0 0 0 1px var(--card-border-color)',\n                    }}\n                  >\n                    <ErrorCard\n                      flex={1}\n                      message={t('preview-frame.connection.error.text')}\n                      onRetry={handleRetry}\n                      onContinueAnyway={handleContinueAnyway}\n                    >\n                      {devMode && (\n                        <>\n                          {overlaysConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.overlay.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: overlaysConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n\n                          {loadersConnection !== 'connected' && (\n                            <Card padding={3} radius={2} tone=\"critical\">\n                              <Stack space={3}>\n                                <Label muted size={0}>\n                                  {t('preview-frame.loader.connection-status.label')}\n                                </Label>\n                                <Code size={1}>\n                                  {t('channel.status', {context: loadersConnection})}\n                                </Code>\n                              </Stack>\n                            </Card>\n                          )}\n                        </>\n                      )}\n                    </ErrorCard>\n                  </MotionFlex>\n                ) : null}\n              </AnimatePresence>\n              <IFrame\n                animate={iframeAnimations}\n                initial={['background']}\n                onLoad={onIFrameLoad}\n                preventClick={preventIframeInteraction}\n                ref={ref}\n                src={initialUrl.toString()}\n                variants={iframeVariants}\n              />\n            </Flex>\n          </Card>\n        </TooltipDelayGroupProvider>\n      </MotionConfig>\n    )\n  },\n)\n\nconst sizes = {\n  desktop: {\n    width: '100%',\n    height: '100%',\n  },\n  mobile: {\n    width: 375,\n    height: 650,\n  },\n}\n\nconst spinnerVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst errorVariants = {\n  initial: {opacity: 1},\n  animate: {opacity: [0, 0, 1]},\n  exit: {opacity: [1, 0, 0]},\n}\n\nconst iframeVariants = {\n  desktop: {\n    ...sizes.desktop,\n    boxShadow: '0 0 0 0px var(--card-border-color)',\n  },\n  mobile: {\n    ...sizes.mobile,\n    boxShadow: '0 0 0 1px var(--card-border-color)',\n  },\n  background: {\n    opacity: 0,\n    scale: 1,\n  },\n  idle: {\n    scale: 1,\n  },\n  reloading: {\n    scale: [1, 1, 1, 0.98],\n  },\n  active: {\n    opacity: [0, 0, 1],\n    scale: 1,\n  },\n  timedOut: {\n    opacity: [0, 0, 1],\n  },\n}\n","import type {ClientPerspective} from '@sanity/client'\nimport isEqual from 'fast-deep-equal'\nimport {type MutableRefObject, useCallback, useMemo, useRef, useState} from 'react'\n\nimport type {FrameState, PresentationPerspective} from './types'\n\nexport type DocumentOnPage = {\n  _id: string\n  _type: string\n}\n\ntype DocumentCache = Record<string, DocumentOnPage>\ntype KeyedDocumentCache = Record<string, DocumentCache>\n\nlet warnedAboutCrossDatasetReference = false\n\nexport function useDocumentsOnPage(\n  perspective: PresentationPerspective,\n  frameStateRef: MutableRefObject<FrameState>,\n): [\n  DocumentOnPage[],\n  (key: string, perspective: PresentationPerspective, state: DocumentOnPage[]) => void,\n] {\n  if (perspective !== 'published' && perspective !== 'previewDrafts') {\n    throw new Error(`Invalid perspective: ${perspective}`)\n  }\n\n  const [published, setPublished] = useState<KeyedDocumentCache>({})\n  const [previewDrafts, setPreviewDrafts] = useState<KeyedDocumentCache>({})\n\n  // Used to compare the frame url with its value when the cache was last updated\n  // If the url has changed, the entire cache is replaced\n  const urlRef = useRef<string | undefined>('')\n\n  const setDocumentsOnPage = useCallback(\n    (key: string, perspective: ClientPerspective, sourceDocuments: DocumentOnPage[] = []) => {\n      const documents = sourceDocuments.filter((sourceDocument) => {\n        if ('_projectId' in sourceDocument && sourceDocument._projectId) {\n          // @TODO Handle cross dataset references\n          if (!warnedAboutCrossDatasetReference) {\n            // eslint-disable-next-line no-console\n            console.warn(\n              'Cross dataset references are not supported yet, ignoring source document',\n              sourceDocument,\n            )\n            warnedAboutCrossDatasetReference = true\n          }\n          return false\n        }\n        return sourceDocument\n      })\n\n      const setCache = perspective === 'published' ? setPublished : setPreviewDrafts\n\n      setCache((cache) => {\n        // Create the `next` documents, dedupe by `_id`\n        const next: Record<string, DocumentOnPage> = {}\n        for (const document of documents) {\n          next[document._id] = document\n        }\n\n        // If the frame url has changed, replace the entire cache with the next documents\n        if (urlRef.current !== frameStateRef.current.url) {\n          urlRef.current = frameStateRef.current.url\n          return {[key]: next}\n        }\n\n        // If the keyed cache has changed, return the entire cache and replace the keyed part\n        const prev = cache[key]\n        if (!isEqual(prev, next)) {\n          return {...cache, [key]: next}\n        }\n\n        // Otherwise return the entire cache as is\n        return cache\n      })\n    },\n    [frameStateRef],\n  )\n\n  const documentsOnPage = useMemo(() => {\n    const keyedCache = perspective === 'published' ? published : previewDrafts\n    const uniqueDocuments = Object.values(keyedCache).reduce((acc, cache) => {\n      Object.values(cache).forEach((doc) => {\n        acc[doc._id] = doc\n      })\n      return acc\n    }, {})\n\n    return Object.values(uniqueDocuments)\n  }, [perspective, previewDrafts, published])\n\n  return [documentsOnPage, setDocumentsOnPage]\n}\n","import type {ResponseQueryOptions} from '@sanity/client'\nimport {match, type Path} from 'path-to-regexp'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {useClient} from 'sanity'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {API_VERSION} from './constants'\nimport type {\n  DocumentResolver,\n  DocumentResolverContext,\n  MainDocument,\n  MainDocumentState,\n  PresentationNavigate,\n  PreviewUrlOption,\n} from './types'\n\n// Helper function to \"unwrap\" a result when it is either explicitly provided or\n// returned as the result of a passed function\nfunction fnOrObj<T, U>(arg: T | ((ctx: U) => T), context: U): T {\n  return arg instanceof Function ? arg(context) : arg\n}\n\nfunction getQueryFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): string | undefined {\n  if (resolver.resolve) {\n    const filter = resolver.resolve(context)?.filter\n    return filter ? `*[${filter}][0]{_id, _type}` : undefined\n  }\n\n  if ('type' in resolver) {\n    return `*[_type == \"${resolver.type}\"][0]{_id, _type}`\n  }\n\n  return `*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`\n}\n\nfunction getParamsFromResult(\n  resolver: DocumentResolver,\n  context: DocumentResolverContext,\n): Record<string, string> {\n  if (resolver.resolve) {\n    return resolver.resolve(context)?.params ?? context.params\n  }\n\n  if ('type' in resolver) {\n    return {}\n  }\n\n  return fnOrObj(resolver.params, context) ?? context.params\n}\n\nexport function getRouteContext(route: Path, url: URL): DocumentResolverContext | undefined {\n  const routes = Array.isArray(route) ? route : [route]\n\n  for (route of routes) {\n    let origin: DocumentResolverContext['origin'] = undefined\n    let path = route\n\n    // Handle absolute URLs\n    if (typeof route === 'string') {\n      try {\n        const absolute = new URL(route)\n        origin = absolute.origin\n        path = absolute.pathname\n      } catch {\n        // Ignore, as we assume a relative path\n      }\n    }\n\n    // If an origin has been explicitly provided, check that it matches\n    if (origin && url.origin !== origin) continue\n\n    try {\n      const matcher = match<Record<string, string>>(path, {decode: decodeURIComponent})\n      const result = matcher(url.pathname)\n      if (result) {\n        const {params, path} = result\n        return {origin, params, path}\n      }\n    } catch (e) {\n      throw new Error(`\"${route}\" is not a valid route pattern`)\n    }\n  }\n  return undefined\n}\n\nexport function useMainDocument(props: {\n  navigate?: PresentationNavigate\n  navigationHistory: RouterState[]\n  path?: string\n  previewUrl?: PreviewUrlOption\n  resolvers?: DocumentResolver[]\n}): MainDocumentState | undefined {\n  const {navigate, navigationHistory, path, previewUrl, resolvers = []} = props\n  const {state: routerState} = useRouter()\n  const client = useClient({apiVersion: API_VERSION})\n\n  const [mainDocumentState, setMainDocumentState] = useState<MainDocumentState | undefined>(\n    undefined,\n  )\n  const mainDocumentIdRef = useRef<string | undefined>(undefined)\n\n  const url = useMemo(() => {\n    const relativeUrl =\n      path || routerState._searchParams?.find(([key]) => key === 'preview')?.[1] || ''\n\n    const base =\n      typeof previewUrl === 'string'\n        ? previewUrl\n        : typeof previewUrl === 'object'\n          ? previewUrl?.origin || location.origin\n          : location.origin\n\n    return new URL(relativeUrl, base)\n  }, [path, previewUrl, routerState._searchParams])\n\n  const clearState = useCallback(() => {\n    setMainDocumentState(undefined)\n    mainDocumentIdRef.current = undefined\n  }, [])\n\n  useEffect(() => {\n    if (resolvers.length && url) {\n      let result:\n        | {\n            context: DocumentResolverContext\n            resolver: DocumentResolver\n          }\n        | undefined\n\n      for (const resolver of resolvers) {\n        const context = getRouteContext(resolver.route, url)\n        if (context) {\n          result = {context, resolver}\n          break\n        }\n      }\n\n      if (result) {\n        const query = getQueryFromResult(result.resolver, result.context)\n        const params = getParamsFromResult(result.resolver, result.context)\n\n        if (query) {\n          const controller = new AbortController()\n          const options: ResponseQueryOptions = {\n            perspective: 'previewDrafts',\n            signal: controller.signal,\n          }\n\n          client\n            .fetch<MainDocument | undefined>(query, params, options)\n            .then((doc) => {\n              if (!doc || mainDocumentIdRef.current !== doc._id) {\n                setMainDocumentState({\n                  document: doc,\n                  path: url.pathname,\n                })\n                mainDocumentIdRef.current = doc?._id\n\n                // We only want to force a navigation to the main document if\n                // the path changed but the document ID did not. An explicit\n                // document navigation should take precedence over displaying\n                // the main document. We determine if an explicit document\n                // navigation has occured by comparing the IDs of the last two\n                // resultant navigation states.\n                if (navigationHistory.at(-1)?.['id'] === navigationHistory.at(-2)?.['id']) {\n                  navigate?.({\n                    id: doc?._id,\n                    type: doc?._type,\n                  })\n                }\n              }\n            })\n            .catch((e) => {\n              if (e instanceof Error && e.name === 'AbortError') return\n              setMainDocumentState({document: undefined, path: url.pathname})\n              mainDocumentIdRef.current = undefined\n            })\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n    clearState()\n    return undefined\n  }, [client, clearState, navigate, navigationHistory, resolvers, url])\n\n  return mainDocumentState\n}\n","import {urlStringToPath} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\n\nimport type {PresentationStateParams} from '../types'\n\nexport function parseId(rawId: string | undefined): string | undefined {\n  if (rawId === undefined) {\n    return undefined\n  }\n\n  const segments = decodeURIComponent(rawId)?.split('.')\n\n  if (segments[0] === 'drafts') {\n    segments.shift()\n  }\n\n  return segments.join('.')\n}\n\nexport function parsePath(rawPath: string | undefined): string | undefined {\n  if (rawPath === undefined) {\n    return undefined\n  }\n\n  return studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)))\n}\n\nexport function parseRouterState(state: PresentationStateParams): PresentationStateParams {\n  return {\n    id: parseId(state.id),\n    path: parsePath(state.path),\n    type: state.type,\n  }\n}\n","import {type MutableRefObject, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport type {RouterContextValue, RouterState, SearchParam} from 'sanity/router'\n\nimport {getPublishedId} from './internals'\nimport {parseRouterState} from './lib/parse'\nimport type {\n  CombinedSearchParams,\n  FrameState,\n  PresentationNavigate,\n  PresentationParams,\n  PresentationSearchParams,\n  PresentationStateParams,\n  StructureDocumentPaneParams,\n} from './types'\n\nfunction pruneObject<T extends RouterState | PresentationParams>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(\n      ([, value]) => value !== undefined && value !== '' && value !== null,\n    ),\n  ) as T\n}\n\nexport function useParams({\n  initialPreviewUrl,\n  routerNavigate,\n  routerState,\n  routerSearchParams,\n  frameStateRef,\n}: {\n  initialPreviewUrl: URL\n  routerNavigate: RouterContextValue['navigate']\n  routerState: RouterState & PresentationStateParams\n  routerSearchParams: {\n    [k: string]: string\n  }\n  frameStateRef: MutableRefObject<FrameState>\n}): {\n  navigate: PresentationNavigate\n  navigationHistory: RouterState[]\n  params: PresentationParams\n  searchParams: PresentationSearchParams\n  structureParams: StructureDocumentPaneParams\n} {\n  const params = useMemo<PresentationParams>(() => {\n    const {id, path, type} = parseRouterState(routerState)\n\n    return {\n      id,\n      type,\n      path,\n      preview:\n        routerSearchParams['preview'] || `${initialPreviewUrl.pathname}${initialPreviewUrl.search}`,\n      perspective: routerSearchParams['perspective'],\n      viewport: routerSearchParams['viewport'],\n      inspect: routerSearchParams['inspect'],\n      rev: routerSearchParams['rev'],\n      prefersLatestPublished: routerSearchParams['prefersLatestPublished'],\n      since: routerSearchParams['since'],\n      template: routerSearchParams['template'],\n      templateParams: routerSearchParams['templateParams'],\n      view: routerSearchParams['view'],\n      // assist\n      pathKey: routerSearchParams['pathKey'],\n      instruction: routerSearchParams['instruction'],\n      // comments\n      comment: routerSearchParams['comment'],\n    }\n  }, [routerState, routerSearchParams, initialPreviewUrl])\n\n  const structureParams = useMemo<StructureDocumentPaneParams>(() => {\n    const pruned = pruneObject({\n      inspect: params.inspect,\n      path: params.path,\n      rev: params.rev,\n      prefersLatestPublished: params.prefersLatestPublished,\n      since: params.since,\n      template: params.template,\n      templateParams: params.templateParams,\n      view: params.view,\n      // assist\n      pathKey: params.pathKey,\n      instruction: params.instruction,\n      // comments\n      comment: params.comment,\n    })\n    return pruned\n  }, [\n    params.comment,\n    params.inspect,\n    params.instruction,\n    params.path,\n    params.pathKey,\n    params.prefersLatestPublished,\n    params.rev,\n    params.since,\n    params.template,\n    params.templateParams,\n    params.view,\n  ])\n\n  const searchParams = useMemo<PresentationSearchParams>(() => {\n    const pruned = pruneObject({\n      perspective: params.perspective,\n      preview: params.preview,\n      viewport: params.viewport,\n    })\n    return pruned\n  }, [params.perspective, params.preview, params.viewport])\n\n  const routerStateRef = useRef(routerState)\n\n  useEffect(() => {\n    routerStateRef.current = routerState\n  }, [routerState])\n\n  const [navigationHistory, setNavigationHistory] = useState<RouterState[]>([routerState])\n\n  const navigate = useCallback<PresentationNavigate>(\n    (nextState, nextSearchState = {}, forceReplace) => {\n      // Force navigation to use published IDs only\n      if (nextState.id) nextState.id = getPublishedId(nextState.id)\n\n      // Extract type, id and path as 'routerState'\n      const {_searchParams: routerSearchParams, ...routerState} = routerStateRef.current\n\n      // Convert array of search params to an object\n      const routerSearchState = (routerSearchParams || []).reduce(\n        (acc, [key, value]) => ((acc[key as keyof CombinedSearchParams] = value), acc),\n        {} as CombinedSearchParams,\n      )\n\n      // Merge routerState and incoming state\n      const state: RouterState = pruneObject({\n        ...routerState,\n        ...nextState,\n      })\n\n      // Merge routerSearchState and incoming searchState\n      const searchState = pruneObject({\n        ...routerSearchState,\n        ...nextSearchState,\n      })\n\n      // If the document has changed, clear the template and templateParams\n      if (routerState.id !== state['id']) {\n        delete searchState.template\n        delete searchState.templateParams\n      }\n\n      state._searchParams = Object.entries(searchState).reduce(\n        (acc, [key, value]) => [...acc, [key, value]],\n        [] as SearchParam[],\n      )\n\n      const replace = forceReplace ?? searchState.preview === frameStateRef.current.url\n\n      setNavigationHistory((prev) => [...prev, state])\n      routerNavigate(state, {replace})\n    },\n    [routerNavigate, frameStateRef],\n  )\n\n  return {\n    navigate,\n    navigationHistory,\n    params,\n    searchParams,\n    structureParams,\n  }\n}\n","import {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {definePreviewUrl} from '@sanity/preview-url-secret/define-preview-url'\nimport {startTransition, useEffect, useMemo, useRef, useState} from 'react'\nimport {type SanityClient, useClient, useCurrentUser} from 'sanity'\nimport {suspend} from 'suspend-react'\n\nimport {API_VERSION} from './constants'\nimport {useActiveWorkspace} from './internals'\nimport type {PreviewUrlOption} from './types'\n\nexport function usePreviewUrl(\n  previewUrl: PreviewUrlOption,\n  toolName: string,\n  previewSearchParam: string | null,\n): URL {\n  const client = useClient({apiVersion: API_VERSION})\n  const workspace = useActiveWorkspace()\n  const basePath = workspace?.activeWorkspace?.basePath || '/'\n  const workspaceName = workspace?.activeWorkspace?.name || 'default'\n  const deps = useSuspendCacheKeys(toolName, basePath, workspaceName, previewSearchParam)\n  const previewUrlSecret = usePreviewUrlSecret(\n    typeof previewUrl === 'object' || typeof previewUrl === 'function',\n    deps,\n  )\n\n  return suspend(async () => {\n    if (typeof previewUrl === 'string') {\n      const resolvedUrl = new URL(previewUrl, location.origin)\n      let resultUrl = resolvedUrl\n      try {\n        if (previewSearchParam) {\n          const restoredUrl = new URL(previewSearchParam, resolvedUrl)\n          if (restoredUrl.origin === resolvedUrl.origin) {\n            resultUrl = restoredUrl\n          }\n        } else if (document.referrer) {\n          const referrerUrl = new URL(document.referrer)\n          if (referrerUrl.origin === resolvedUrl.origin) {\n            resultUrl = referrerUrl\n          }\n        }\n      } catch {\n        // ignore\n      }\n      // Prevent infinite recursion\n      if (\n        location.origin === resultUrl.origin &&\n        (resultUrl.pathname.startsWith(`${basePath}/`) || resultUrl.pathname === basePath)\n      ) {\n        return resolvedUrl\n      }\n      return resultUrl\n    }\n    const resolvePreviewUrl =\n      typeof previewUrl === 'object' ? definePreviewUrl<SanityClient>(previewUrl) : previewUrl\n    const resolvedUrl = await resolvePreviewUrl({\n      client,\n      previewUrlSecret: previewUrlSecret!,\n      previewSearchParam,\n      referrer: typeof document === 'undefined' ? null : document.referrer,\n      studioBasePath: basePath,\n    })\n    return new URL(resolvedUrl, location.origin)\n  }, [...deps, previewUrlSecret]) satisfies URL\n}\n\n// https://github.com/pmndrs/suspend-react?tab=readme-ov-file#making-cache-keys-unique\nconst resolveUUID = Symbol()\n\nfunction useSuspendCacheKeys(\n  toolName: string,\n  basePath: string,\n  workspaceName: string,\n  previewSearchParam: string | null,\n) {\n  // Allow busting the cache when the Presentation Tool is reloaded, without causing it to suspend on every render that changes the `preview` parameter\n  const [cachedPreviewSearchParam, setCachedPreviewSearchParam] = useState(\n    () => previewSearchParam || '',\n  )\n  const timeoutRef = useRef(0)\n  useEffect(() => {\n    if (cachedPreviewSearchParam && previewSearchParam) {\n      // Handle resets, like when the Presentation Tool is clicked in the navbar\n      window.clearTimeout(timeoutRef.current)\n      return () => {\n        timeoutRef.current = window.setTimeout(() => {\n          setCachedPreviewSearchParam('')\n        }, 100)\n      }\n    }\n    return\n  }, [cachedPreviewSearchParam, previewSearchParam])\n\n  const currentUser = useCurrentUser()\n  return useMemo(\n    () => [\n      // Cache based on a few specific conditions\n      '@sanity/presentation',\n      basePath,\n      workspaceName,\n      toolName,\n      currentUser?.id,\n      resolveUUID,\n      cachedPreviewSearchParam,\n    ],\n    [basePath, currentUser?.id, toolName, workspaceName, cachedPreviewSearchParam],\n  )\n}\n\nfunction usePreviewUrlSecret(enabled: boolean, deps: (string | symbol | undefined)[]) {\n  const client = useClient({apiVersion: API_VERSION})\n  const currentUser = useCurrentUser()\n  const [secretLastExpiredAt, setSecretLastExpiredAt] = useState<string>('')\n\n  const previewUrlSecret = enabled\n    ? suspend(async () => {\n        return await createPreviewSecret(\n          client,\n          '@sanity/presentation',\n          typeof window === 'undefined' ? '' : location.href,\n          currentUser?.id,\n        )\n      }, [...deps, secretLastExpiredAt])\n    : null\n\n  useEffect(() => {\n    if (!previewUrlSecret) return\n    const timeout = setTimeout(() => {\n      startTransition(() => setSecretLastExpiredAt(previewUrlSecret.expiresAt.toString()))\n    }, previewUrlSecret.expiresAt.getTime() - Date.now())\n    return () => clearTimeout(timeout)\n  }, [previewUrlSecret])\n\n  return previewUrlSecret?.secret || null\n}\n","import {type ChannelsController, type ChannelStatus, createChannelsController} from '@repo/channels'\nimport {\n  getQueryCacheKey,\n  isAltKey,\n  isHotkey,\n  type LoaderMsg,\n  type OverlayMsg,\n  type PresentationMsg,\n  type PreviewKitMsg,\n  type VisualEditingConnectionIds,\n  type VisualEditingMsg,\n} from '@repo/visual-editing-helpers'\nimport {studioPath} from '@sanity/client/csm'\nimport {BoundaryElementProvider, Flex} from '@sanity/ui'\nimport {\n  lazy,\n  type ReactElement,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport {type Path, type SanityDocument, type Tool, useDataset, useProjectId} from 'sanity'\nimport {type RouterContextValue, useRouter} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  DEFAULT_TOOL_NAME,\n  EDIT_INTENT_MODE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from './constants'\nimport {type CommentIntentGetter, useUnique, useWorkspace} from './internals'\nimport {debounce} from './lib/debounce'\nimport {Panel} from './panels/Panel'\nimport {Panels} from './panels/Panels'\nimport {PresentationContent} from './PresentationContent'\nimport {PresentationNavigateProvider} from './PresentationNavigateProvider'\nimport {usePresentationNavigator} from './PresentationNavigator'\nimport {PresentationParamsProvider} from './PresentationParamsProvider'\nimport {PresentationProvider} from './PresentationProvider'\nimport {PreviewFrame} from './preview/PreviewFrame'\nimport {\n  ACTION_IFRAME_LOADED,\n  ACTION_IFRAME_REFRESH,\n  ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n  presentationReducer,\n  presentationReducerInit,\n} from './reducers/presentationReducer'\nimport type {\n  FrameState,\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  PresentationNavigate,\n  PresentationPerspective,\n  PresentationPluginOptions,\n  PresentationStateParams,\n  PresentationViewport,\n  StructureDocumentPaneParams,\n} from './types'\nimport {useDocumentsOnPage} from './useDocumentsOnPage'\nimport {useMainDocument} from './useMainDocument'\nimport {useParams} from './useParams'\nimport {usePreviewUrl} from './usePreviewUrl'\n\nconst LoaderQueries = lazy(() => import('./loader/LoaderQueries'))\nconst PostMessageRefreshMutations = lazy(() => import('./editor/PostMessageRefreshMutations'))\n\nconst Container = styled(Flex)`\n  overflow-x: auto;\n`\n\nexport default function PresentationTool(props: {\n  tool: Tool<PresentationPluginOptions>\n}): ReactElement {\n  const {previewUrl: _previewUrl, components} = props.tool.options ?? {}\n  const name = props.tool.name || DEFAULT_TOOL_NAME\n  const {unstable_navigator} = components || {}\n\n  const {navigate: routerNavigate, state: routerState} = useRouter() as RouterContextValue & {\n    state: PresentationStateParams\n  }\n  const routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || []))\n\n  const initialPreviewUrl = usePreviewUrl(\n    _previewUrl || '/',\n    name,\n    routerSearchParams['preview'] || null,\n  )\n\n  const [devMode] = useState(() => {\n    const option = props.tool.options?.devMode\n\n    if (typeof option === 'function') return option()\n    if (typeof option === 'boolean') return option\n\n    return typeof window !== 'undefined' && window.location.hostname === 'localhost'\n  })\n\n  const targetOrigin = useMemo(() => {\n    return initialPreviewUrl.origin\n  }, [initialPreviewUrl.origin])\n\n  const iframeRef = useRef<HTMLIFrameElement>(null)\n\n  const [channel, setChannel] =\n    useState<ChannelsController<VisualEditingConnectionIds, PresentationMsg | LoaderMsg>>()\n\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const frameStateRef = useRef<FrameState>({\n    title: undefined,\n    url: undefined,\n  })\n\n  const {\n    navigate: _navigate,\n    navigationHistory,\n    params,\n    searchParams,\n    structureParams,\n  } = useParams({\n    initialPreviewUrl,\n    routerNavigate,\n    routerState,\n    routerSearchParams,\n    frameStateRef,\n  })\n\n  // Most navigation events should be debounced, so use this unless explicitly needed\n  const navigate = useMemo(() => debounce<PresentationNavigate>(_navigate, 50), [_navigate])\n\n  const [state, dispatch] = useReducer(presentationReducer, {}, presentationReducerInit)\n\n  const perspective = useMemo(\n    () => (params.perspective ? 'published' : 'previewDrafts'),\n    [params.perspective],\n  )\n\n  const viewport = useMemo(() => (params.viewport ? 'mobile' : 'desktop'), [params.viewport])\n\n  const [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(perspective, frameStateRef)\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  const mainDocumentState = useMainDocument({\n    // Prevent flash of content by using immediate navigation\n    navigate: _navigate,\n    navigationHistory,\n    path: params.preview,\n    previewUrl: props.tool.options?.previewUrl,\n    resolvers: props.tool.options?.resolve?.mainDocuments,\n  })\n\n  const [overlaysConnection, setOverlaysConnection] = useState<ChannelStatus>('connecting')\n  const [loadersConnection, setLoadersConnection] = useState<ChannelStatus>('connecting')\n  const [previewKitConnection, setPreviewKitConnection] = useState<ChannelStatus>('connecting')\n\n  const [popups] = useState<Set<Window>>(() => new Set())\n  const handleOpenPopup = useCallback(\n    (url: string) => {\n      const source = window.open(url, '_blank')\n      if (source) {\n        popups.add(source)\n      }\n    },\n    [popups],\n  )\n\n  useEffect(() => {\n    if (popups.size && channel) {\n      // loop popups and call channel.addSource\n      for (const source of popups) {\n        if (source && 'closed' in source && !source.closed) {\n          channel.addSource(source)\n        }\n      }\n    }\n  }, [channel, popups, popups.size])\n\n  // This workaround can be removed once the need to set prefersLatestPublished is no longer there\n  const perspectiveRef = useRef(perspective)\n  useEffect(() => {\n    perspectiveRef.current = perspective\n  }, [perspective])\n\n  useEffect(() => {\n    const target = iframeRef.current?.contentWindow\n\n    if (!target) return\n\n    const nextChannel = createChannelsController<\n      VisualEditingConnectionIds,\n      PresentationMsg | LoaderMsg,\n      LoaderMsg | OverlayMsg | VisualEditingMsg | PreviewKitMsg\n    >({\n      id: 'presentation',\n      target,\n      targetOrigin,\n      connectTo: [\n        {\n          id: 'overlays',\n          heartbeat: true,\n          onStatusUpdate: setOverlaysConnection,\n          onEvent(type, data) {\n            if ((type === 'visual-editing/focus' || type === 'overlay/focus') && 'id' in data) {\n              navigate(\n                {\n                  type: data.type,\n                  id: data.id,\n                  path: data.path,\n                },\n                {\n                  prefersLatestPublished:\n                    'isDraft' in data || perspectiveRef.current === 'previewDrafts'\n                      ? undefined\n                      : 'true',\n                },\n              )\n            } else if (type === 'visual-editing/navigate' || type === 'overlay/navigate') {\n              const {title, url} = data\n              if (frameStateRef.current.url !== url) {\n                navigate({}, {preview: url})\n              }\n              frameStateRef.current = {title, url}\n            } else if (type === 'visual-editing/meta') {\n              frameStateRef.current.title = data.title\n            } else if (type === 'visual-editing/toggle' || type === 'overlay/toggle') {\n              dispatch({\n                type: ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE,\n                enabled: data.enabled,\n              })\n            } else if (type === 'visual-editing/documents') {\n              setDocumentsOnPage(\n                'visual-editing',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (type === 'visual-editing/refreshing' && data.source === 'manual') {\n              clearTimeout(refreshRef.current)\n            } else if (type === 'visual-editing/refreshing' && data.source === 'mutation') {\n              dispatch({type: ACTION_IFRAME_REFRESH})\n            } else if (type === 'visual-editing/refreshed') {\n              dispatch({type: ACTION_IFRAME_LOADED})\n            }\n          },\n        },\n        {\n          id: 'loaders',\n          heartbeat: true,\n          onStatusUpdate: setLoadersConnection,\n          onEvent(type, data) {\n            if (\n              type === 'loader/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'loaders',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            } else if (\n              type === 'loader/query-listen' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              if (\n                typeof data.heartbeat === 'number' &&\n                data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n              ) {\n                throw new Error(\n                  `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n                )\n              }\n              setLiveQueries((prev) => ({\n                ...prev,\n                [getQueryCacheKey(data.query, data.params)]: {\n                  perspective: data.perspective,\n                  query: data.query,\n                  params: data.params,\n                  receivedAt: Date.now(),\n                  heartbeat: data.heartbeat ?? false,\n                } satisfies LiveQueriesStateValue,\n              }))\n            }\n          },\n        },\n        {\n          id: 'preview-kit',\n          heartbeat: true,\n          onStatusUpdate: setPreviewKitConnection,\n          onEvent(type, data) {\n            if (\n              type === 'preview-kit/documents' &&\n              data.projectId === projectId &&\n              data.dataset === dataset\n            ) {\n              setDocumentsOnPage(\n                'preview-kit',\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                data.perspective as unknown as any,\n                data.documents,\n              )\n            }\n          },\n        },\n      ],\n    })\n    setChannel(nextChannel)\n\n    return () => {\n      nextChannel.destroy()\n      setChannel(undefined)\n    }\n  }, [dataset, projectId, setDocumentsOnPage, navigate, targetOrigin])\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleFocusPath = useCallback(\n    (nextPath: Path) => {\n      // Don’t need to explicitly set the id here because it was either already set via postMessage or is the same if navigating in the document pane\n      navigate({path: studioPath.toString(nextPath)}, {}, true)\n    },\n    [navigate],\n  )\n\n  const handlePreviewPath = useCallback(\n    (nextPath: string) => {\n      const url = new URL(nextPath, initialPreviewUrl.origin)\n      const preview = url.pathname + url.search\n      if (url.origin === initialPreviewUrl.origin && preview !== params.preview) {\n        navigate({}, {preview})\n      }\n    },\n    [initialPreviewUrl, params, navigate],\n  )\n\n  const handleStructureParams = useCallback(\n    (structureParams: StructureDocumentPaneParams) => {\n      // Omit the prefersLatestPublished param as it causes an internal studio\n      // useEffect to run and replace the revision with the previous value\n      navigate({}, {...structureParams, prefersLatestPublished: undefined})\n    },\n    [navigate],\n  )\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    channel?.send('overlays', 'presentation/perspective', {\n      perspective: perspective,\n    })\n  }, [channel, perspective])\n\n  // Dispatch a focus or blur message when the id or path change\n  useEffect(() => {\n    if (params.id && params.path) {\n      channel?.send('overlays', 'presentation/focus', {\n        id: params.id,\n        path: params.path,\n      })\n    } else {\n      channel?.send('overlays', 'presentation/blur', undefined)\n    }\n  }, [channel, params.id, params.path])\n\n  // Handle opening the published document when previewing published\n  const latestPublishedIdRef = useRef<string | undefined>(undefined)\n  useEffect(() => {\n    if (\n      perspective === 'published' &&\n      params.id &&\n      params.id !== latestPublishedIdRef.current &&\n      !params.rev &&\n      !params.prefersLatestPublished\n    ) {\n      navigate({}, {prefersLatestPublished: 'true'}, true)\n    }\n    latestPublishedIdRef.current = params.id\n  }, [navigate, params.id, params.prefersLatestPublished, params.rev, perspective])\n\n  // Dispatch a navigation message when the preview param changes\n  useEffect(() => {\n    if (\n      frameStateRef.current.url &&\n      params.preview &&\n      frameStateRef.current.url !== params.preview\n    ) {\n      frameStateRef.current.url = params.preview\n      if (overlaysConnection !== 'connected' && iframeRef.current) {\n        iframeRef.current.src = `${targetOrigin}${params.preview}`\n      } else {\n        channel?.send('overlays', 'presentation/navigate', {\n          url: params.preview,\n          type: 'replace',\n        })\n      }\n    }\n  }, [channel, overlaysConnection, targetOrigin, params.preview])\n\n  const toggleOverlay = useCallback(\n    () => channel?.send('overlays', 'presentation/toggleOverlay', undefined),\n    [channel],\n  )\n\n  const [displayedDocument, setDisplayedDocument] = useState<\n    Partial<SanityDocument> | null | undefined\n  >(null)\n\n  useEffect(() => {\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n    }\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (isAltKey(e)) {\n        toggleOverlay()\n      }\n\n      if (isHotkey(['mod', '\\\\'], e)) {\n        toggleOverlay()\n      }\n    }\n    window.addEventListener('keydown', handleKeydown)\n    window.addEventListener('keyup', handleKeyUp)\n    return () => {\n      window.removeEventListener('keydown', handleKeydown)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [toggleOverlay])\n\n  const [boundaryElement, setBoundaryElement] = useState<HTMLDivElement | null>(null)\n\n  const [{navigatorEnabled, toggleNavigator}, PresentationNavigator] = usePresentationNavigator({\n    unstable_navigator,\n  })\n\n  // Handle edge case where the `&rev=` parameter gets \"stuck\"\n  const idRef = useRef<string | undefined>(params.id)\n  useEffect(() => {\n    if (params.rev && idRef.current && params.id !== idRef.current) {\n      navigate({}, {rev: undefined})\n    }\n    idRef.current = params.id\n  })\n\n  const refreshRef = useRef<number>()\n  const handleRefresh = useCallback(\n    (fallback: () => void) => {\n      dispatch({type: ACTION_IFRAME_REFRESH})\n      if (channel) {\n        // We only wait 300ms for the iframe to ack the refresh request before running the fallback logic\n        refreshRef.current = window.setTimeout(fallback, 300)\n        channel.send('overlays', 'presentation/refresh', {\n          source: 'manual',\n          livePreviewEnabled:\n            previewKitConnection === 'connected' || loadersConnection === 'connected',\n        })\n        return\n      }\n      fallback()\n    },\n    [channel, loadersConnection, previewKitConnection],\n  )\n\n  const workspace = useWorkspace()\n\n  const getCommentIntent = useCallback<CommentIntentGetter>(\n    ({id, type, path}) => {\n      if (frameStateRef.current.url) {\n        return {\n          title: frameStateRef.current.title || frameStateRef.current.url,\n          name: 'edit',\n          params: {\n            id,\n            path,\n            type,\n            inspect: COMMENTS_INSPECTOR_NAME,\n            workspace: workspace.name,\n            mode: EDIT_INTENT_MODE,\n            preview: params.preview,\n          },\n        }\n      }\n      return undefined\n    },\n    [params.preview, workspace.name],\n  )\n\n  const setViewport = useCallback(\n    (next: PresentationViewport) => {\n      // Omit the viewport URL search param if the next viewport state is the\n      // default: 'desktop'\n      const viewport = next === 'desktop' ? undefined : 'mobile'\n      navigate({}, {viewport}, true)\n    },\n    [navigate],\n  )\n\n  const setPerspective = useCallback(\n    (next: PresentationPerspective) => {\n      // Omit the perspective URL search param if the next perspective state is\n      // the default: 'previewDrafts'\n      const perspective = next === 'previewDrafts' ? undefined : next\n      navigate({}, {perspective})\n    },\n    [navigate],\n  )\n\n  return (\n    <>\n      <PresentationProvider\n        devMode={devMode}\n        name={name}\n        navigate={navigate}\n        params={params}\n        searchParams={searchParams}\n        structureParams={structureParams}\n      >\n        <PresentationNavigateProvider navigate={navigate}>\n          <PresentationParamsProvider params={params}>\n            <Container height=\"fill\">\n              <Panels>\n                <PresentationNavigator />\n                <Panel\n                  id=\"preview\"\n                  minWidth={325}\n                  defaultSize={navigatorEnabled ? 50 : 75}\n                  order={3}\n                >\n                  <Flex direction=\"column\" flex={1} height=\"fill\" ref={setBoundaryElement}>\n                    <BoundaryElementProvider element={boundaryElement}>\n                      <PreviewFrame\n                        dispatch={dispatch}\n                        iframe={state.iframe}\n                        initialUrl={initialPreviewUrl}\n                        loadersConnection={loadersConnection}\n                        navigatorEnabled={navigatorEnabled}\n                        onPathChange={handlePreviewPath}\n                        onRefresh={handleRefresh}\n                        openPopup={handleOpenPopup}\n                        overlaysConnection={overlaysConnection}\n                        previewUrl={params.preview}\n                        perspective={perspective}\n                        ref={iframeRef}\n                        setPerspective={setPerspective}\n                        setViewport={setViewport}\n                        targetOrigin={targetOrigin}\n                        toggleNavigator={toggleNavigator}\n                        toggleOverlay={toggleOverlay}\n                        viewport={viewport}\n                        visualEditing={state.visualEditing}\n                      />\n                    </BoundaryElementProvider>\n                  </Flex>\n                </Panel>\n                <PresentationContent\n                  documentId={params.id}\n                  documentsOnPage={documentsOnPage}\n                  documentType={params.type}\n                  getCommentIntent={getCommentIntent}\n                  mainDocumentState={mainDocumentState}\n                  onFocusPath={handleFocusPath}\n                  onStructureParams={handleStructureParams}\n                  searchParams={searchParams}\n                  setDisplayedDocument={setDisplayedDocument}\n                  structureParams={structureParams}\n                />\n              </Panels>\n            </Container>\n          </PresentationParamsProvider>\n        </PresentationNavigateProvider>\n      </PresentationProvider>\n      {channel && (\n        <Suspense>\n          <LoaderQueries\n            channel={channel}\n            liveQueries={liveQueries}\n            perspective={perspective}\n            liveDocument={displayedDocument}\n            documentsOnPage={documentsOnPage}\n          />\n        </Suspense>\n      )}\n      {channel && params.id && params.type && (\n        <Suspense>\n          <PostMessageRefreshMutations\n            channel={channel}\n            id={params.id}\n            type={params.type}\n            loadersConnection={loadersConnection}\n            previewKitConnection={previewKitConnection}\n          />\n        </Suspense>\n      )}\n    </>\n  )\n}\n"],"names":["jsx","jsxs","Fragment","studioPath","Button","Card","Flex","Container$1","Stack","Text","Inline","Box","Code","Label","ErrorBoundary","TextInput","MenuItem","useToast","usePrefersReducedMotion","TooltipDelayGroupProvider","Tooltip","Switch","MenuButton","Menu","Spinner","BoundaryElementProvider","createContext","useContext","useLayoutEffect","useMemo","useRef","useState","useCallback","useEffect","forwardRef","memo","createElement","startTransition","useReducer","Suspense","lazy","useTranslation","useUnique","getPublishedId","useDocumentPreviewStore","getPreviewStateObservable","useSchema","SanityDefaultPreview","getPreviewValueWithFallback","PreviewCard","Translate","CommentsIntentProvider","useActiveWorkspace","useClient","useCurrentUser","Hotkeys","useProjectId","useDataset","useWorkspace","StateLink","useRouter","decodeJsonParams","styled","presentationLocaleNamespace","usePresentationTool","PresentationNavigateContext","PresentationParamsContext","PresentationContext","API_VERSION","MAX_TIME_TO_OVERLAYS_CONNECTION","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","COMMENTS_INSPECTOR_NAME","EDIT_INTENT_MODE","DEFAULT_TOOL_NAME","WarningOutlineIcon","ResetIcon","LaunchIcon","CopyIcon","PanelLeftIcon","RefreshIcon","ShareIcon","ChevronDownIcon","CheckmarkIcon","MobileDeviceIcon","DesktopIcon","EditIcon","PublishIcon","PaneRouterContext","PaneLayout","StructureToolProvider","DocumentListPane$1","DocumentPane$1","DisplayedDocumentBroadcasterProvider","hasSecretSearchParams","setSecretSearchParams","withoutSecretSearchParams","motion","MotionConfig","AnimatePresence","createPreviewSecret","isEqual","match","definePreviewUrl","suspend","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","RESPONSE_TIMEOUT","HEARTBEAT_INTERVAL","HANDSHAKE_INTERVAL","HANDSHAKE_MSG_TYPES","isHandshakeMessage","type","some","t","isLegacyHandshakeMessage","data","Array","isArray","every","key","startsWith","createChannelsControllerInternal","config","target","channels","connectTo","map","buffer","id","handler","handshakeHandler","status","interval","heartbeat","stopHandshake","channel","window","clearInterval","e","find","from","setChannelStatus","sendHandshake","messageHandler","_a","_b","_c","connectionId","args","onEvent","call","send","responseTo","handleEvents","console","error","origin","domain","to","includes","targetOrigin","isValidMessageEvent","stopHeartbeat","next","onStatusUpdate","uuid","setInterval","startHandshake","heartbeatInverval","startHeartbeat","toFlush","splice","length","forEach","flush","msg","postMessage","expectResponse","maxWait","setTimeout","removeEventListener","transact","warn","eventData","clearTimeout","addEventListener","destroy","store","store2","store3","store4","_stringify","input","Object","getPrototypeOf","constructor","name","_addIssue","context","label","dataset","config2","other","_d","_e","_f","value","expected","expects","received","issue","kind","message","requirement","path","issues","lang","abortEarly","abortPipeEarly","skipPipe","isSchema","reference","get","getSpecificMessage","getGlobalMessage","typed","_isAllowedObjectKey","ValiError","super","__publicField","this","getFallback","schema","fallback","boolean","async","_run","object","entries","value2","valueDataset","pathItem","unshift","optional","wrapped","default","getDefault","string","parse","getGlobalConfig","y","m","h","w","pipe2","pipe","index","nextAction","r","o","minLength","s","A","n","a","JSON","stringify","baseUrl","projectId","tool","workspace","isDraft","href","record","entryKey","entryValue","keyDataset","c","unknown","alt","ctrl","mod","test","navigator","platform","shift","debounce","fn","timeout","timer","apply","PanelsContext","displayName","Root","div","Panel","children","defaultSize","minWidth","maxWidth","order","getPanelStyle","registerElement","unregisterElement","style","itemKey","getStoredItem","localStorage","getItem","getKeyForPanels","panels","panel","join","usePanelsStorage","set","widths","stored","setItem","setStoredItem","val","setDebounced","getNextWidth","nextWidth","containerWidth","maxWidthPx","minWidthPx","Math","min","max","getPanelWidth","width","findIndex","toPrecision","getOffset","event","handleElement","initialOffset","initialHandleElementRect","clientX","getBoundingClientRect","left","isPanel","element","isResizer","getSortedElements","elements","values","sort","b","validateWidths","widthsToValidate","total","reduce","remainingWidth","toFixed","abs","PanelsWrapper","Panels","panelsEl","setElements","Map","filter","setWidths","activeResizer","setActiveResizer","panelsRef","flexGrow","pointerEvents","prev","has","delete","dragRef","innerWidth","dragOffset","panelAfter","panelBefore","resizerIndex","resizerRect","startX","startDragging","elementsArr","el","resizer","resizeElement","current","acc","pageX","stopDragging","drag","preventDefault","stopPropagation","prevWidths","nextWidths","delta","panelsState","initialDragState","initialWidths","pivotPanel","deltaApplied","localeCompare","numeric","getNextWidths","prevWidth","storage","storedWidths","validatedStoredWidths","defaultWidths","panelsWithoutWidth","remainingWidthTotal","widthsWithNulls","defaultWidth","getDefaultWidths","resizeObserver","ResizeObserver","observe","disconnect","Provider","ref","ErrorCard","props","onRetry","onContinueAnyway","restProps","retryButton","fontSize","mode","onClick","text","continueAnywayButton","tone","height","align","justify","Container","padding","sizing","space","size","weight","muted","resolveQueryStringFromParams","nextParams","allowed","params","parts","encodeQueryString","obj","BackLink","searchParams","state","_searchParams","title","ReferenceChildLink","documentId","documentType","parentRefPath","template","prefersLatestPublished","perspective","PresentationPaneRouterProvider","onStructureParams","structureParams","refs","routerState","resolvePathFromState","routerSearchParams","fromEntries","createPathWithParams","groupIndex","siblingIndex","payload","hasGroupSiblings","groupLength","routerPanesState","ChildLink","childLinkProps","childId","_id","_type","backLinkProps","ParameterizedLink","closeCurrentAndAfter","handleEditReference","replaceCurrent","pane","closeCurrent","duplicateCurrent","setView","viewId","setParams","inspect","setPayload","navigateIntent","intentName","intentParams","RootLayout","WrappedCode","DocumentListPane","mainDocumentState","devMode","ids","document","schemaTypeName","errorParams","setErrorParams","handleRetry","flex","overflow","radius","onCatch","direction","StructureDocumentListPane","itemId","paneKey","DocumentPane","onFocusPath","templateParams","paneDocumentNode","templateParameters","StructureDocumentPane","DocumentPanel","ContentEditor","MainDocumentLink","schemaType","previewState","documentPreviewStore","preview","setPreview","subscription","subscribe","unsubscribe","usePreviewState","published","draft","shadow","__unstable_focusRing","as","gap","i18nKey","components","Resizer","ResizerInner","$disabled","PanelResizer","propId","disabled","usePanelId","isDragging","onMouseDown","nativeEvent","onDrag","onDragStop","blur","resetDocumentStyles","bodyStyle","body","documentStyle","documentElement","cursor","userSelect","removeProperty","setDocumentStyles","PresentationContentWrapper","setDisplayedDocument","getCommentIntent","getIntent","PresentationContent","documentsOnPage","PresentationNavigateProvider","navigate","_navigate","usePresentationNavigator","unstable_navigator","navigatorProvided","component","_navigatorEnabled","setNavigatorEnabled","defaultValue","setValue","useLocalState","navigatorEnabled","toggleNavigator","enabled","Component","Navigator","NavigatorComponent","navigatorDisabled","PresentationParamsProvider","PresentationProvider","ACTION_IFRAME_LOADED","ACTION_IFRAME_REFRESH","ACTION_IFRAME_RELOAD","ACTION_VISUAL_EDITING_OVERLAYS_TOGGLE","presentationReducer","action","iframe","toggleVisualEditingOverlays","visualEditing","overlaysEnabled","mainDocumentSchema","fallback2","iframeStatusSchema","picklist","initStateSchema","mainDocument","INITIAL_PRESENTATION_STATE","presentationReducerInit","IFrameElement","IFrameOverlay","IFrame","animate","initial","onLoad","preventClick","src","variants","PreviewLocationInput","onChange","prefix","suffix","basePath","activeWorkspace","inputRef","sessionValue","setSessionValue","customValidity","setCustomValidity","handleChange","currentTarget","handleKeyDown","absoluteValue","nextValue","handleBlur","resetButton","icon","clearButton","onBlur","onClear","onKeyDownCapture","zIndex","ShareUrlMenuItems","initialUrl","openPopup","previewLocationOrigin","previewLocationRoute","handleOpenPopup","CopyUrlMenuButton","rel","pushToast","client","apiVersion","currentUser","setDisabled","clipboard","closable","url","onFinally","onError","description","resolvePreviewUrl","previewUrlSecret","location","secret","ClipboardItem","item","then","Blob","write","catch","writeText","MotionFlex","PERSPECTIVE_TITLE_KEY","previewDrafts","PERSPECTIVE_TONES","PERSPECTIVE_ICONS","PreviewFrame","dispatch","loadersConnection","onPathChange","onRefresh","overlaysConnection","previewUrl","setPerspective","setViewport","toggleOverlay","viewport","prefersReducedMotion","toggleViewportSize","loading","timedOut","setTimedOut","refreshing","somethingIsWrong","setSomethingIsWrong","iframeIsBusy","handleRefresh","handleContinueAnyway","setContinueAnyway","continueAnyway","showOverlaysConnectionStatus","setShowOverlaysConnectionState","previewURL","URL","pathname","search","onIFrameLoad","instance","activeElement","dispatchEvent","MouseEvent","bubbles","cancelable","preventIframeInteraction","iframeAnimations","transition","duration","delay","position","minHeight","marginRight","content","fallbackPlacements","placement","portal","selected","whiteSpace","paddingY","keys","marginTop","marginBottom","lineHeight","borderRadius","margin","checked","marginX","button","iconRight","menu","popover","constrainSize","pressed","opacity","exit","spinnerVariants","inset","sizes","errorVariants","background","borderTop","boxShadow","backdropFilter","WebkitBackdropFilter","WebkitTransition","iframeVariants","desktop","mobile","scale","idle","reloading","active","warnedAboutCrossDatasetReference","fnOrObj","arg","Function","getRouteContext","route","routes","absolute","result","decode","decodeURIComponent","useMainDocument","navigationHistory","resolvers","setMainDocumentState","mainDocumentIdRef","relativeUrl","base","clearState","resolver","query","resolve","getQueryFromResult","controller","AbortController","signal","fetch","doc","at","abort","parseId","rawId","segments","split","parsePath","rawPath","exec","e2","Number","_key","urlStringToPath","pruneObject","useParams","initialPreviewUrl","routerNavigate","frameStateRef","rev","since","view","pathKey","instruction","comment","routerStateRef","setNavigationHistory","nextState","nextSearchState","forceReplace","routerSearchState","searchState","replace","usePreviewUrl","toolName","previewSearchParam","workspaceName","deps","cachedPreviewSearchParam","setCachedPreviewSearchParam","timeoutRef","resolveUUID","useSuspendCacheKeys","secretLastExpiredAt","setSecretLastExpiredAt","expiresAt","getTime","Date","now","usePreviewUrlSecret","resolvedUrl","resultUrl","restoredUrl","referrer","referrerUrl","studioBasePath","Symbol","LoaderQueries","import","PostMessageRefreshMutations","PresentationTool","_previewUrl","option","hostname","iframeRef","setChannel","liveQueries","setLiveQueries","setDocumentsOnPage","setPublished","setPreviewDrafts","urlRef","sourceDocuments","documents","sourceDocument","_projectId","cache","uniqueDocuments","useDocumentsOnPage","mainDocuments","setOverlaysConnection","setLoadersConnection","previewKitConnection","setPreviewKitConnection","popups","Set","source","open","add","closed","addSource","perspectiveRef","contentWindow","nextChannel","sources","sendToSource","WeakMap","destroySource","prevConnectTo","createChannelsController","refreshRef","getQueryCacheKey","receivedAt","liveQuery","handleFocusPath","nextPath","handlePreviewPath","handleStructureParams","latestPublishedIdRef","displayedDocument","handleKeyUp","handleKeydown","toUpperCase","boundaryElement","setBoundaryElement","PresentationNavigator","idRef","livePreviewEnabled","liveDocument"],"mappings":"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","x_google_ignoreList":[0,1,2,3,7]}